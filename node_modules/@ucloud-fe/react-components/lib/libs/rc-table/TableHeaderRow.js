'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _miniStore = require('mini-store');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function TableHeaderRow(_ref) {
    var row = _ref.row,
        index = _ref.index,
        height = _ref.height,
        components = _ref.components,
        onHeaderRow = _ref.onHeaderRow,
        prefixCls = _ref.prefixCls;

    var HeaderRow = components.header.row;
    var HeaderCell = components.header.cell;
    var rowProps = onHeaderRow(row.map(function (cell) {
        return cell.column;
    }), index);
    var customStyle = rowProps ? rowProps.style : {};
    var style = Object.assign({ height: height }, customStyle);

    return _react2.default.createElement(
        HeaderRow,
        _extends({}, rowProps, { style: style }),
        row.map(function (cell, i) {
            var column = cell.column,
                _cell$style = cell.style,
                style = _cell$style === undefined ? {} : _cell$style,
                className = cell.className,
                cellProps = _objectWithoutProperties(cell, ['column', 'style', 'className']);

            var offset = column.offset,
                fixed = column.fixed;

            var customProps = column.onHeaderCell ? column.onHeaderCell(column) : {};

            var _customProps$_style = customProps._style,
                _style = _customProps$_style === undefined ? {} : _customProps$_style,
                _className = customProps.className;

            style = Object.assign({}, style, _style);
            className = (0, _classnames2.default)(className, _className);
            if (column.align) {
                style.textAlign = column.align;
            }
            if (fixed && offset != null) {
                style.position = 'sticky';
                style.zIndex = 2;
                if (column.fixed === 'left') {
                    style.left = offset;
                    if (column.latestLeftFixed) {
                        className = (0, _classnames2.default)(className, prefixCls + '-th-fixed-left-latest');
                    }
                } else if (column.fixed === 'right') {
                    style.right = offset;
                    if (column.firstRightFixed) {
                        className = (0, _classnames2.default)(className, prefixCls + '-th-fixed-right-first');
                    }
                }
            }
            return _react2.default.createElement(HeaderCell, _extends({}, cellProps, customProps, {
                style: style,
                className: className,
                key: column.key || column.dataIndex || i
            }));
        })
    );
}

TableHeaderRow.propTypes = {
    row: _propTypes2.default.array,
    index: _propTypes2.default.number,
    height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    components: _propTypes2.default.any,
    onHeaderRow: _propTypes2.default.func,
    prefixCls: _propTypes2.default.string
};

function getRowHeight(state, props) {
    var fixedColumnsHeadRowsHeight = state.fixedColumnsHeadRowsHeight;
    var columns = props.columns,
        rows = props.rows,
        fixed = props.fixed;

    var headerHeight = fixedColumnsHeadRowsHeight[0];

    if (!fixed) {
        return null;
    }

    if (headerHeight && columns) {
        if (headerHeight === 'auto') {
            return 'auto';
        }
        return headerHeight / rows.length;
    }
    return null;
}

exports.default = (0, _miniStore.connect)(function (state, props) {
    return {
        height: getRowHeight(state, props)
    };
})(TableHeaderRow);