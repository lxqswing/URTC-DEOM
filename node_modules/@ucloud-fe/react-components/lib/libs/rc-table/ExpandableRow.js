'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _miniStore = require('mini-store');

var _ExpandIcon = require('./ExpandIcon');

var _ExpandIcon2 = _interopRequireDefault(_ExpandIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExpandableRow = (_temp2 = _class = function (_React$Component) {
    _inherits(ExpandableRow, _React$Component);

    function ExpandableRow() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ExpandableRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ExpandableRow.__proto__ || Object.getPrototypeOf(ExpandableRow)).call.apply(_ref, [this].concat(args))), _this), _this.hasExpandIcon = function (columnIndex) {
            var expandRowByClick = _this.props.expandRowByClick;

            return !_this.expandIconAsCell && !expandRowByClick && columnIndex === _this.expandIconColumnIndex;
        }, _this.handleExpandChange = function (record, event) {
            var _this$props = _this.props,
                onExpandedChange = _this$props.onExpandedChange,
                expanded = _this$props.expanded,
                rowKey = _this$props.rowKey;

            if (_this.expandable) {
                onExpandedChange(!expanded, record, event, rowKey);
            }
        }, _this.handleRowClick = function (record, index, event) {
            var _this$props2 = _this.props,
                expandRowByClick = _this$props2.expandRowByClick,
                onRowClick = _this$props2.onRowClick;

            if (expandRowByClick) {
                _this.handleExpandChange(record, event);
            }
            if (onRowClick) {
                onRowClick(record, index, event);
            }
        }, _this.renderExpandIcon = function () {
            var _this$props3 = _this.props,
                prefixCls = _this$props3.prefixCls,
                expanded = _this$props3.expanded,
                record = _this$props3.record,
                needIndentSpaced = _this$props3.needIndentSpaced;


            return _react2.default.createElement(_ExpandIcon2.default, {
                expandable: _this.expandable,
                prefixCls: prefixCls,
                onExpand: _this.handleExpandChange,
                needIndentSpaced: needIndentSpaced,
                expanded: expanded,
                record: record
            });
        }, _this.renderExpandIconCell = function (cells) {
            if (!_this.expandIconAsCell) {
                return;
            }
            var prefixCls = _this.props.prefixCls;


            cells.push(_react2.default.createElement(
                'td',
                { className: prefixCls + '-expand-icon-cell', key: 'rc-table-expand-icon-cell' },
                _this.renderExpandIcon()
            ));
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ExpandableRow, [{
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.handleDestroy();
        }
    }, {
        key: 'handleDestroy',
        value: function handleDestroy() {
            var _props = this.props,
                onExpandedChange = _props.onExpandedChange,
                rowKey = _props.rowKey,
                record = _props.record;

            if (this.expandable) {
                onExpandedChange(false, record, null, rowKey, true);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                childrenColumnName = _props2.childrenColumnName,
                expandedRowRender = _props2.expandedRowRender,
                indentSize = _props2.indentSize,
                record = _props2.record,
                fixed = _props2.fixed;


            this.expandIconAsCell = fixed !== 'right' ? this.props.expandIconAsCell : false;
            this.expandIconColumnIndex = fixed !== 'right' ? this.props.expandIconColumnIndex : -1;
            var childrenData = record[childrenColumnName];
            this.expandable = !!(childrenData || expandedRowRender);

            var expandableRowProps = {
                indentSize: indentSize,
                onRowClick: this.handleRowClick,
                hasExpandIcon: this.hasExpandIcon,
                renderExpandIcon: this.renderExpandIcon,
                renderExpandIconCell: this.renderExpandIconCell
            };

            return this.props.children(expandableRowProps);
        }
    }]);

    return ExpandableRow;
}(_react2.default.Component), _class.propTypes = {
    prefixCls: _propTypes2.default.string.isRequired,
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
    fixed: _propTypes2.default.oneOf([true, 'left', 'right']),
    record: _propTypes2.default.object.isRequired,
    indentSize: _propTypes2.default.number,
    needIndentSpaced: _propTypes2.default.bool.isRequired,
    expandRowByClick: _propTypes2.default.bool,
    expanded: _propTypes2.default.bool.isRequired,
    expandIconAsCell: _propTypes2.default.bool,
    expandIconColumnIndex: _propTypes2.default.number,
    childrenColumnName: _propTypes2.default.string,
    expandedRowRender: _propTypes2.default.func,
    onExpandedChange: _propTypes2.default.func.isRequired,
    onRowClick: _propTypes2.default.func,
    children: _propTypes2.default.func.isRequired
}, _temp2);
exports.default = (0, _miniStore.connect)(function (_ref2, _ref3) {
    var expandedRowKeys = _ref2.expandedRowKeys;
    var rowKey = _ref3.rowKey;
    return {
        expanded: !!~expandedRowKeys.indexOf(rowKey)
    };
})(ExpandableRow);