'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _miniStore = require('mini-store');

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _TableRow = require('./TableRow');

var _TableRow2 = _interopRequireDefault(_TableRow);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExpandableTable = (_temp = _class = function (_React$Component) {
    _inherits(ExpandableTable, _React$Component);

    function ExpandableTable(props) {
        _classCallCheck(this, ExpandableTable);

        var _this = _possibleConstructorReturn(this, (ExpandableTable.__proto__ || Object.getPrototypeOf(ExpandableTable)).call(this, props));

        _initialiseProps.call(_this);

        var data = props.data,
            childrenColumnName = props.childrenColumnName,
            defaultExpandAllRows = props.defaultExpandAllRows,
            expandedRowKeys = props.expandedRowKeys,
            defaultExpandedRowKeys = props.defaultExpandedRowKeys,
            getRowKey = props.getRowKey;


        var finnalExpandedRowKeys = [];
        var rows = [].concat(_toConsumableArray(data));

        if (defaultExpandAllRows) {
            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];
                finnalExpandedRowKeys.push(getRowKey(row, i));
                rows = rows.concat(row[childrenColumnName] || []);
            }
        } else {
            finnalExpandedRowKeys = expandedRowKeys || defaultExpandedRowKeys;
        }

        _this.columnManager = props.columnManager;
        _this.store = props.store;

        _this.store.setState({
            expandedRowsHeight: {},
            expandedRowKeys: finnalExpandedRowKeys
        });
        return _this;
    }

    _createClass(ExpandableTable, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if ('expandedRowKeys' in this.props) {
                this.store.setState({
                    expandedRowKeys: this.props.expandedRowKeys
                });
            }
        }
    }, {
        key: 'renderExpandedRow',
        value: function renderExpandedRow(record, index, _render, className, ancestorKeys, indent, fixed) {
            var _this2 = this;

            var _props = this.props,
                prefixCls = _props.prefixCls,
                expandIconAsCell = _props.expandIconAsCell,
                indentSize = _props.indentSize;

            var parentKey = ancestorKeys[ancestorKeys.length - 1];
            var rowKey = parentKey + '-extra-row';
            var components = {
                body: {
                    row: 'tr',
                    cell: 'td'
                }
            };
            var colCount = void 0;
            colCount = this.columnManager.leafColumns().length;

            var columns = [{
                key: 'extra-row',
                render: function render() {
                    var _store$getState = _this2.store.getState(),
                        expandedRowKeys = _store$getState.expandedRowKeys;

                    var expanded = !!~expandedRowKeys.indexOf(parentKey);
                    return {
                        props: {
                            colSpan: colCount
                        },
                        children: fixed !== 'right' ? _render(record, index, indent, expanded) : '&nbsp;'
                    };
                }
            }];
            if (expandIconAsCell && fixed !== 'right') {
                columns.unshift({
                    key: 'expand-icon-placeholder',
                    render: function render() {
                        return null;
                    }
                });
            }

            return _react2.default.createElement(_TableRow2.default, {
                key: rowKey,
                columns: columns,
                className: className,
                rowKey: rowKey,
                ancestorKeys: ancestorKeys,
                prefixCls: prefixCls + '-expanded-row',
                indentSize: indentSize,
                indent: indent,
                fixed: fixed,
                components: components,
                expandedRow: true
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                data = _props2.data,
                childrenColumnName = _props2.childrenColumnName,
                children = _props2.children;

            var needIndentSpaced = data.some(function (record) {
                return record[childrenColumnName];
            });

            return children({
                props: this.props,
                needIndentSpaced: needIndentSpaced,
                renderRows: this.renderRows,
                handleExpandChange: this.handleExpandChange,
                renderExpandIndentCell: this.renderExpandIndentCell
            });
        }
    }]);

    return ExpandableTable;
}(_react2.default.Component), _class.propTypes = {
    expandIconAsCell: _propTypes2.default.bool,
    expandedRowKeys: _propTypes2.default.array,
    expandedRowClassName: _propTypes2.default.func,
    defaultExpandAllRows: _propTypes2.default.bool,
    defaultExpandedRowKeys: _propTypes2.default.array,
    expandIconColumnIndex: _propTypes2.default.number,
    expandedRowRender: _propTypes2.default.func,
    childrenColumnName: _propTypes2.default.string,
    indentSize: _propTypes2.default.number,
    onExpand: _propTypes2.default.func,
    onExpandedRowsChange: _propTypes2.default.func,
    columnManager: _propTypes2.default.object.isRequired,
    store: _propTypes2.default.object.isRequired,
    prefixCls: _propTypes2.default.string.isRequired,
    data: _propTypes2.default.array,
    children: _propTypes2.default.func.isRequired,
    getRowKey: _propTypes2.default.func.isRequired
}, _class.defaultProps = {
    expandIconAsCell: false,
    expandedRowClassName: function expandedRowClassName() {
        return '';
    },
    expandIconColumnIndex: 0,
    defaultExpandAllRows: false,
    defaultExpandedRowKeys: [],
    childrenColumnName: 'children',
    indentSize: 15,
    onExpand: function onExpand() {},
    onExpandedRowsChange: function onExpandedRowsChange() {}
}, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.handleExpandChange = function (expanded, record, event, rowKey) {
        var destroy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }

        var _props3 = _this3.props,
            onExpandedRowsChange = _props3.onExpandedRowsChange,
            onExpand = _props3.onExpand;

        var _store$getState2 = _this3.store.getState(),
            expandedRowKeys = _store$getState2.expandedRowKeys;

        if (expanded) {
            // row was expaned
            expandedRowKeys = [].concat(_toConsumableArray(expandedRowKeys), [rowKey]);
        } else {
            // row was collapse
            var expandedRowIndex = expandedRowKeys.indexOf(rowKey);
            if (expandedRowIndex !== -1) {
                expandedRowKeys = (0, _utils.remove)(expandedRowKeys, rowKey);
            }
        }

        if (!_this3.props.expandedRowKeys) {
            _this3.store.setState({ expandedRowKeys: expandedRowKeys });
        }

        onExpandedRowsChange(expandedRowKeys);
        if (!destroy) {
            onExpand(expanded, record);
        }
    };

    this.renderExpandIndentCell = function (rows, fixed) {
        var _props4 = _this3.props,
            prefixCls = _props4.prefixCls,
            expandIconAsCell = _props4.expandIconAsCell;

        if (!expandIconAsCell || fixed === 'right' || !rows.length) {
            return;
        }

        var iconColumn = {
            key: 'rc-table-expand-icon-cell',
            className: prefixCls + '-expand-icon-th',
            title: '',
            rowSpan: rows.length
        };

        rows[0].unshift(Object.assign({}, iconColumn, { column: iconColumn }));
    };

    this.renderRows = function (renderRows, rows, record, index, indent, parentKey, ancestorKeys) {
        var _props5 = _this3.props,
            expandedRowClassName = _props5.expandedRowClassName,
            expandedRowRender = _props5.expandedRowRender,
            childrenColumnName = _props5.childrenColumnName;

        var childrenData = record[childrenColumnName];
        var nextAncestorKeys = [].concat(_toConsumableArray(ancestorKeys), [parentKey]);
        var nextIndent = indent + 1;

        if (expandedRowRender) {
            rows.push(_this3.renderExpandedRow(record, index, expandedRowRender, expandedRowClassName(record, index, indent), nextAncestorKeys, nextIndent));
        }

        if (childrenData) {
            rows.push.apply(rows, _toConsumableArray(renderRows(childrenData, nextIndent, nextAncestorKeys)));
        }
    };
}, _temp);


(0, _reactLifecyclesCompat.polyfill)(ExpandableTable);

exports.default = (0, _miniStore.connect)()(ExpandableTable);