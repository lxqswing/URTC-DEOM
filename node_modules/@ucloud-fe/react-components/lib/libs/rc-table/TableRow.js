'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _miniStore = require('mini-store');

var _reactLifecyclesCompat = require('react-lifecycles-compat');

var _TableCell = require('./TableCell');

var _TableCell2 = _interopRequireDefault(_TableCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableRow = (_temp = _class = function (_React$Component) {
    _inherits(TableRow, _React$Component);

    function TableRow(props) {
        _classCallCheck(this, TableRow);

        var _this = _possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call(this, props));

        _this.shouldRender = props.visible;

        _this.state = {};
        return _this;
    }

    _createClass(TableRow, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.state.shouldRender) {
                this.saveRowRef();
            }
        }
    }, {
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            return !!(this.props.visible || nextProps.visible);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            if (this.state.shouldRender && !this.rowRef) {
                this.saveRowRef();
            }
        }
    }, {
        key: 'setExpanedRowHeight',
        value: function setExpanedRowHeight() {
            var _props = this.props,
                store = _props.store,
                rowKey = _props.rowKey;

            var _store$getState = store.getState(),
                expandedRowsHeight = _store$getState.expandedRowsHeight;

            var height = this.rowRef.getBoundingClientRect().height;
            expandedRowsHeight = Object.assign({}, expandedRowsHeight, _defineProperty({}, rowKey, height));
            store.setState({ expandedRowsHeight: expandedRowsHeight });
        }
    }, {
        key: 'setRowHeight',
        value: function setRowHeight() {
            var _props2 = this.props,
                store = _props2.store,
                rowKey = _props2.rowKey;

            var _store$getState2 = store.getState(),
                fixedColumnsBodyRowsHeight = _store$getState2.fixedColumnsBodyRowsHeight;

            var height = this.rowRef.getBoundingClientRect().height;
            store.setState({
                fixedColumnsBodyRowsHeight: Object.assign({}, fixedColumnsBodyRowsHeight, _defineProperty({}, rowKey, height))
            });
        }
    }, {
        key: 'getStyle',
        value: function getStyle() {
            var _props3 = this.props,
                height = _props3.height,
                visible = _props3.visible;


            if (height && height !== this.style.height) {
                this.style = Object.assign({}, this.style, { height: height });
            }

            if (!visible && !this.style.display) {
                this.style = Object.assign({}, this.style, { display: 'none' });
            }

            return this.style;
        }
    }, {
        key: 'saveRowRef',
        value: function saveRowRef() {
            // eslint-disable-next-line react/no-find-dom-node
            this.rowRef = _reactDom2.default.findDOMNode(this);

            var _props4 = this.props,
                fixed = _props4.fixed,
                expandedRow = _props4.expandedRow,
                ancestorKeys = _props4.ancestorKeys;


            if (!fixed && expandedRow) {
                this.setExpanedRowHeight();
            }

            if (!fixed && ancestorKeys.length >= 0) {
                this.setRowHeight();
            }
        }
    }, {
        key: 'render',
        value: function render() {
            if (!this.state.shouldRender) {
                return null;
            }

            var _props5 = this.props,
                prefixCls = _props5.prefixCls,
                columns = _props5.columns,
                record = _props5.record,
                rowKey = _props5.rowKey,
                index = _props5.index,
                onRow = _props5.onRow,
                indent = _props5.indent,
                indentSize = _props5.indentSize,
                height = _props5.height,
                visible = _props5.visible,
                components = _props5.components,
                hasExpandIcon = _props5.hasExpandIcon,
                renderExpandIcon = _props5.renderExpandIcon,
                renderExpandIconCell = _props5.renderExpandIconCell;


            var BodyRow = components.body.row;
            var BodyCell = components.body.cell;

            var className = this.props.className;


            var cells = [];

            renderExpandIconCell(cells);

            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                cells.push(_react2.default.createElement(_TableCell2.default, {
                    prefixCls: prefixCls,
                    record: record,
                    indentSize: indentSize,
                    indent: indent,
                    index: index,
                    column: column,
                    key: column.key || column.dataIndex,
                    expandIcon: hasExpandIcon(i) && renderExpandIcon(),
                    component: BodyCell
                }));
            }

            var rowClassName = (prefixCls + ' ' + className + ' ' + prefixCls + '-level-' + indent).trim();

            var rowProps = onRow(record, index);
            var customStyle = rowProps ? rowProps.style : {};
            var style = { height: height };

            if (!visible) {
                style.display = 'none';
            }

            style = Object.assign({}, style, customStyle);

            return _react2.default.createElement(
                BodyRow,
                _extends({ className: rowClassName }, rowProps, { style: style, 'data-row-key': rowKey }),
                cells
            );
        }
    }], [{
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(nextProps, prevState) {
            if (prevState.visible || !prevState.visible && nextProps.visible) {
                return {
                    shouldRender: true,
                    visible: nextProps.visible
                };
            }
            return {
                visible: nextProps.visible
            };
        }
    }]);

    return TableRow;
}(_react2.default.Component), _class.propTypes = {
    onRow: _propTypes2.default.func,
    record: _propTypes2.default.object,
    prefixCls: _propTypes2.default.string,
    columns: _propTypes2.default.array,
    height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    index: _propTypes2.default.number,
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
    className: _propTypes2.default.string,
    indent: _propTypes2.default.number,
    indentSize: _propTypes2.default.number,
    hasExpandIcon: _propTypes2.default.func,
    visible: _propTypes2.default.bool.isRequired,
    store: _propTypes2.default.object.isRequired,
    fixed: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
    renderExpandIcon: _propTypes2.default.func,
    renderExpandIconCell: _propTypes2.default.func,
    components: _propTypes2.default.any,
    expandedRow: _propTypes2.default.bool,
    ancestorKeys: _propTypes2.default.array.isRequired
}, _class.defaultProps = {
    onRow: function onRow() {},
    onHover: function onHover() {},
    hasExpandIcon: function hasExpandIcon() {},
    renderExpandIcon: function renderExpandIcon() {},
    renderExpandIconCell: function renderExpandIconCell() {}
}, _temp);


function getRowHeight(state, props) {
    var expandedRowsHeight = state.expandedRowsHeight,
        fixedColumnsBodyRowsHeight = state.fixedColumnsBodyRowsHeight;
    var fixed = props.fixed,
        rowKey = props.rowKey;


    if (!fixed) {
        return null;
    }

    if (expandedRowsHeight[rowKey]) {
        return expandedRowsHeight[rowKey];
    }

    if (fixedColumnsBodyRowsHeight[rowKey]) {
        return fixedColumnsBodyRowsHeight[rowKey];
    }

    return null;
}

(0, _reactLifecyclesCompat.polyfill)(TableRow);

exports.default = (0, _miniStore.connect)(function (state, props) {
    var expandedRowKeys = state.expandedRowKeys;
    var ancestorKeys = props.ancestorKeys;

    var visible = ancestorKeys.length === 0 || ancestorKeys.every(function (k) {
        return ~expandedRowKeys.indexOf(k);
    });

    return {
        visible: visible,
        height: getRowHeight(state, props)
    };
})(TableRow);