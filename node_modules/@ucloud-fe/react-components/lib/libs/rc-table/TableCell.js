'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _get = require('lodash/get');

var _get2 = _interopRequireDefault(_get);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isInvalidRenderCellText(text) {
    return text && !_react2.default.isValidElement(text) && Object.prototype.toString.call(text) === '[object Object]';
}

var TableCell = (_temp = _class = function (_React$Component) {
    _inherits(TableCell, _React$Component);

    function TableCell() {
        _classCallCheck(this, TableCell);

        return _possibleConstructorReturn(this, (TableCell.__proto__ || Object.getPrototypeOf(TableCell)).apply(this, arguments));
    }

    _createClass(TableCell, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                record = _props.record,
                indentSize = _props.indentSize,
                prefixCls = _props.prefixCls,
                indent = _props.indent,
                index = _props.index,
                expandIcon = _props.expandIcon,
                column = _props.column,
                BodyCell = _props.component;
            var dataIndex = column.dataIndex,
                render = column.render,
                _column$className = column.className,
                className = _column$className === undefined ? '' : _column$className,
                offset = column.offset;

            // We should return undefined if no dataIndex is specified, but in order to
            // be compatible with object-path's behavior, we return the record object instead.

            var text = void 0;
            if (typeof dataIndex === 'number') {
                text = (0, _get2.default)(record, dataIndex);
            } else if (!dataIndex || dataIndex.length === 0) {
                text = record;
            } else {
                text = (0, _get2.default)(record, dataIndex);
            }
            var tdProps = {};
            var colSpan = void 0;
            var rowSpan = void 0;

            if (render) {
                text = render(text, record, index);
                if (isInvalidRenderCellText(text)) {
                    tdProps = text.props || tdProps;
                    colSpan = tdProps.colSpan;
                    rowSpan = tdProps.rowSpan;
                    text = text.children;
                }
            }

            if (column.onCell) {
                tdProps = Object.assign({}, tdProps, column.onCell(record));
            }

            // Fix https://github.com/ant-design/ant-design/issues/1202
            if (isInvalidRenderCellText(text)) {
                text = null;
            }

            var indentText = expandIcon ? _react2.default.createElement('span', {
                style: { paddingLeft: indentSize * indent + 'px' },
                className: prefixCls + '-indent indent-level-' + indent
            }) : null;

            if (rowSpan === 0 || colSpan === 0) {
                return null;
            }

            var _tdProps = tdProps,
                _tdProps$style = _tdProps.style,
                style = _tdProps$style === undefined ? {} : _tdProps$style,
                _className = _tdProps.className;

            style = Object.assign({}, style);
            className = (0, _classnames2.default)(className, _className);
            if (column.align) {
                style.textAlign = column.align;
            }

            if (column.fixed && offset != null) {
                className = (0, _classnames2.default)(className, prefixCls + '-cell-fixed');
                style.position = 'sticky';
                style.zIndex = 2;
                if (column.fixed === 'left') {
                    style.left = offset;
                    if (column.latestLeftFixed) {
                        className = (0, _classnames2.default)(className, prefixCls + '-cell-fixed-left-latest');
                    }
                } else if (column.fixed === 'right') {
                    style.right = offset;
                    if (column.firstRightFixed) {
                        className = (0, _classnames2.default)(className, prefixCls + '-cell-fixed-right-first');
                    }
                }
            }

            return _react2.default.createElement(
                BodyCell,
                _extends({}, tdProps, { className: className, style: style }),
                indentText,
                expandIcon,
                text
            );
        }
    }]);

    return TableCell;
}(_react2.default.Component), _class.propTypes = {
    record: _propTypes2.default.object,
    prefixCls: _propTypes2.default.string,
    index: _propTypes2.default.number,
    indent: _propTypes2.default.number,
    indentSize: _propTypes2.default.number,
    column: _propTypes2.default.object,
    expandIcon: _propTypes2.default.node,
    component: _propTypes2.default.any
}, _temp);
exports.default = TableCell;