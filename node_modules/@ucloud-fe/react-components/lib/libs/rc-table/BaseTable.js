'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _miniStore = require('mini-store');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ColGroup = require('./ColGroup');

var _ColGroup2 = _interopRequireDefault(_ColGroup);

var _TableHeader = require('./TableHeader');

var _TableHeader2 = _interopRequireDefault(_TableHeader);

var _TableRow = require('./TableRow');

var _TableRow2 = _interopRequireDefault(_TableRow);

var _ExpandableRow = require('./ExpandableRow');

var _ExpandableRow2 = _interopRequireDefault(_ExpandableRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var BaseTable = (_temp2 = _class = function (_React$Component) {
    _inherits(BaseTable, _React$Component);

    function BaseTable() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, BaseTable);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = BaseTable.__proto__ || Object.getPrototypeOf(BaseTable)).call.apply(_ref, [this].concat(args))), _this), _this.renderRows = function (renderData, indent) {
            var ancestorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
            var table = _this.context.table;
            var columnManager = table.columnManager,
                components = table.components;
            var _table$props = table.props,
                prefixCls = _table$props.prefixCls,
                childrenColumnName = _table$props.childrenColumnName,
                rowClassName = _table$props.rowClassName,
                rowRef = _table$props.rowRef,
                onRow = _table$props.onRow;
            var _this$props = _this.props,
                getRowKey = _this$props.getRowKey,
                expander = _this$props.expander;


            var rows = [];

            var _loop = function _loop(i) {
                var record = renderData[i];
                var key = getRowKey(record, i);
                var className = typeof rowClassName === 'string' ? rowClassName : rowClassName(record, i, indent);

                var leafColumns = void 0;
                leafColumns = _this.getColumns(columnManager.leafColumns());

                var rowPrefixCls = prefixCls + '-row';

                var row = _react2.default.createElement(
                    _ExpandableRow2.default,
                    _extends({}, expander.props, {
                        index: i,
                        prefixCls: rowPrefixCls,
                        record: record,
                        key: key,
                        rowKey: key,
                        needIndentSpaced: expander.needIndentSpaced,
                        onExpandedChange: expander.handleExpandChange
                    }),
                    function (expandableRow // eslint-disable-line
                    ) {
                        return _react2.default.createElement(_TableRow2.default, _extends({
                            indent: indent,
                            className: className,
                            record: record,
                            index: i,
                            prefixCls: rowPrefixCls,
                            childrenColumnName: childrenColumnName,
                            columns: leafColumns,
                            onRow: onRow,
                            rowKey: key,
                            ancestorKeys: ancestorKeys,
                            ref: rowRef(record, i, indent),
                            components: components
                        }, expandableRow));
                    }
                );

                rows.push(row);

                expander.renderRows(_this.renderRows, rows, record, i, indent, key, ancestorKeys);
            };

            for (var i = 0; i < renderData.length; i++) {
                _loop(i);
            }
            return rows;
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(BaseTable, [{
        key: 'getColumns',
        value: function getColumns(cols) {
            var _props$columns = this.props.columns,
                columns = _props$columns === undefined ? [] : _props$columns;
            var table = this.context.table;
            var prefixCls = table.props.prefixCls;

            return (cols || columns).map(function (column) {
                return Object.assign({}, column, {
                    className: column.fixed ? (0, _classnames2.default)(prefixCls + '-fixed-columns-in-body', column.className) : column.className
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var table = this.context.table;
            var components = table.components;
            var _table$props2 = table.props,
                prefixCls = _table$props2.prefixCls,
                scroll = _table$props2.scroll,
                data = _table$props2.data;
            var _props = this.props,
                expander = _props.expander,
                tableClassName = _props.tableClassName,
                hasHead = _props.hasHead,
                hasBody = _props.hasBody,
                fixed = _props.fixed,
                tableLayout = _props.tableLayout;

            var tableStyle = {};

            if (!fixed && scroll.x && scroll.x !== true) {
                tableStyle.width = scroll.x;
            }
            if (tableLayout === 'fixed') {
                tableStyle.tableLayout = 'fixed';
            }
            var Table = hasBody ? components.table : 'table';
            var BodyWrapper = components.body.wrapper;

            var body = void 0;
            if (hasBody) {
                body = _react2.default.createElement(
                    BodyWrapper,
                    { className: prefixCls + '-tbody' },
                    this.renderRows(data, 0)
                );
            }

            var columns = this.getColumns();

            return _react2.default.createElement(
                Table,
                { className: tableClassName, style: tableStyle, key: 'table' },
                _react2.default.createElement(_ColGroup2.default, { columns: columns, fixed: fixed }),
                hasHead && _react2.default.createElement(_TableHeader2.default, { expander: expander, columns: columns, fixed: fixed }),
                body
            );
        }
    }]);

    return BaseTable;
}(_react2.default.Component), _class.propTypes = {
    fixed: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
    columns: _propTypes2.default.array.isRequired,
    tableClassName: _propTypes2.default.string.isRequired,
    hasHead: _propTypes2.default.bool.isRequired,
    hasBody: _propTypes2.default.bool.isRequired,
    store: _propTypes2.default.object.isRequired,
    expander: _propTypes2.default.object.isRequired,
    getRowKey: _propTypes2.default.func,
    tableLayout: _propTypes2.default.oneOf(['fixed', 'auto'])
}, _class.contextTypes = {
    table: _propTypes2.default.any
}, _temp2);
exports.default = (0, _miniStore.connect)()(BaseTable);