'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _shallowequal = require('shallowequal');

var _shallowequal2 = _interopRequireDefault(_shallowequal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ExpandIcon = (_temp = _class = function (_React$Component) {
    _inherits(ExpandIcon, _React$Component);

    function ExpandIcon() {
        _classCallCheck(this, ExpandIcon);

        return _possibleConstructorReturn(this, (ExpandIcon.__proto__ || Object.getPrototypeOf(ExpandIcon)).apply(this, arguments));
    }

    _createClass(ExpandIcon, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(nextProps) {
            return !(0, _shallowequal2.default)(nextProps, this.props);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                expandable = _props.expandable,
                prefixCls = _props.prefixCls,
                onExpand = _props.onExpand,
                needIndentSpaced = _props.needIndentSpaced,
                expanded = _props.expanded,
                record = _props.record;

            if (expandable) {
                var expandClassName = expanded ? 'expanded' : 'collapsed';
                return _react2.default.createElement('span', {
                    className: prefixCls + '-expand-icon ' + prefixCls + '-' + expandClassName,
                    onClick: function onClick(e) {
                        return onExpand(record, e);
                    }
                });
            } else if (needIndentSpaced) {
                return _react2.default.createElement('span', { className: prefixCls + '-expand-icon ' + prefixCls + '-spaced' });
            }
            return null;
        }
    }]);

    return ExpandIcon;
}(_react2.default.Component), _class.propTypes = {
    record: _propTypes2.default.object,
    prefixCls: _propTypes2.default.string,
    expandable: _propTypes2.default.any,
    expanded: _propTypes2.default.bool,
    needIndentSpaced: _propTypes2.default.bool,
    onExpand: _propTypes2.default.func
}, _temp);
exports.default = ExpandIcon;