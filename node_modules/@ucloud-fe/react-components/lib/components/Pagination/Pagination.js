'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _Icon = require('../../components/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _NumberInput = require('../../components/NumberInput');

var _NumberInput2 = _interopRequireDefault(_NumberInput);

var _localeConsumerDecorator = require('../../components/LocaleProvider/localeConsumerDecorator');

var _localeConsumerDecorator2 = _interopRequireDefault(_localeConsumerDecorator);

var _Pager = require('./Pager');

var _Pager2 = _interopRequireDefault(_Pager);

var _Options = require('./Options');

var _Options2 = _interopRequireDefault(_Options);

var _zh_CN = require('./locale/zh_CN');

var _zh_CN2 = _interopRequireDefault(_zh_CN);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function noop() {}
function isInteger(value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
}
function defaultItemRender(page, type, element) {
    if (type === 'prev') {
        return _react2.default.createElement(_Icon2.default, { type: 'left', className: _style.prefixCls + '-prev-icon' });
    }
    if (type === 'next') {
        return _react2.default.createElement(_Icon2.default, { type: 'right', className: _style.prefixCls + '-next-icon' });
    }
    if (type === 'jump-prev' || type === 'jump-next') {
        return _react2.default.createElement(_Icon2.default, { type: 'more-three', className: _style.prefixCls + '-jump-icon' });
    }
    return element;
}
var Size = ['sm', 'md', 'lg'];

var Pagination = (_dec = (0, _localeConsumerDecorator2.default)({ defaultLocale: _zh_CN2.default, localeName: 'Pagination' }), _dec(_class = (_temp = _class2 = function (_Component) {
    _inherits(Pagination, _Component);

    function Pagination(props) {
        _classCallCheck(this, Pagination);

        var _this = _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).call(this, props));

        _initialiseProps.call(_this);

        var hasOnChange = props.onChange !== noop;
        var hasCurrent = 'current' in props;
        if (hasCurrent && !hasOnChange) {
            console.warn('Warning: You provided a `current` prop to a Pagination component without an `onChange` handler. This will render a read-only component.');
        }

        var current = props.defaultCurrent;
        if ('current' in props) {
            current = props.current;
        }

        var pageSize = props.defaultPageSize;
        if ('pageSize' in props) {
            pageSize = props.pageSize;
        }

        _this.state = {
            current: current,
            currentInputValue: current,
            pageSize: pageSize
        };
        return _this;
    }

    _createClass(Pagination, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            if ('pageSize' in nextProps) {
                this.setState({
                    pageSize: nextProps.pageSize
                });
            }

            var pageSize = 'pageSize' in nextProps ? nextProps.pageSize : this.state.pageSize;
            var current = 'current' in nextProps ? nextProps.current : this.state.current;

            var newCurrent = this.calculatePage(pageSize, nextProps.total);

            if ('current' in nextProps) {
                this.setState({
                    current: nextProps.current,
                    currentInputValue: nextProps.current
                });
            }
            if (current > newCurrent) {
                if (!('current' in nextProps)) {
                    this.setState({
                        current: newCurrent,
                        currentInputValue: newCurrent
                    });
                }
                var onAdvise = nextProps.onAdvise;

                if (onAdvise) {
                    onAdvise(newCurrent, pageSize);
                }
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
            // When current page change, fix focused style of prev item
            // A hacky solution of https://github.com/ant-design/ant-design/issues/8948
            if (prevState.current !== this.state.current && this.paginationNode) {
                var lastCurrentNode = this.paginationNode.querySelector('.' + _style.prefixCls + '-item-' + prevState.current);
                if (lastCurrentNode && document.activeElement === lastCurrentNode) {
                    lastCurrentNode.blur();
                }
            }
        }
    }, {
        key: 'getJumpPrevPage',
        value: function getJumpPrevPage() {
            return Math.max(1, this.state.current - (this.props.showLessItems ? 3 : 5));
        }
    }, {
        key: 'getJumpNextPage',
        value: function getJumpNextPage() {
            return Math.min(this.calculatePage(), this.state.current + (this.props.showLessItems ? 3 : 5));
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            /* eslint-disable no-unused-vars */
            var _props = this.props,
                _current = _props.current,
                defaultCurrent = _props.defaultCurrent,
                total = _props.total,
                showTotal = _props.showTotal,
                _pageSize = _props.pageSize,
                defaultPageSize = _props.defaultPageSize,
                onChange = _props.onChange,
                onAdvise = _props.onAdvise,
                hideOnSinglePage = _props.hideOnSinglePage,
                showSizeChanger = _props.showSizeChanger,
                showLessItems = _props.showLessItems,
                onPageSizeChange = _props.onPageSizeChange,
                showPrevNextJumpers = _props.showPrevNextJumpers,
                showQuickJumper = _props.showQuickJumper,
                showTitle = _props.showTitle,
                pageSizeOptions = _props.pageSizeOptions,
                simple = _props.simple,
                locale = _props.locale,
                className = _props.className,
                itemRender = _props.itemRender,
                size = _props.size,
                optionsProps = _props.optionsProps,
                rest = _objectWithoutProperties(_props, ['current', 'defaultCurrent', 'total', 'showTotal', 'pageSize', 'defaultPageSize', 'onChange', 'onAdvise', 'hideOnSinglePage', 'showSizeChanger', 'showLessItems', 'onPageSizeChange', 'showPrevNextJumpers', 'showQuickJumper', 'showTitle', 'pageSizeOptions', 'simple', 'locale', 'className', 'itemRender', 'size', 'optionsProps']);
            /* eslint-enable no-unused-vars */


            var _state = this.state,
                pageSize = _state.pageSize,
                current = _state.current;

            // When hideOnSinglePage is true and there is only 1 page, hide the pager

            if (hideOnSinglePage === true && total <= pageSize) {
                return null;
            }

            var allPages = this.calculatePage();
            var pagerList = [];
            var jumpPrev = null;
            var jumpNext = null;
            var firstPager = null;
            var lastPager = null;

            var goButton = showQuickJumper && showQuickJumper.goButton;
            var pageBufferSize = showLessItems ? 1 : 2;

            var prevPage = current - 1 > 0 ? current - 1 : 0;
            var nextPage = current + 1 < allPages ? current + 1 : allPages;

            var wrapClassName = (0, _classnames3.default)(_style.prefixCls, className, _defineProperty({}, _style.prefixCls + '-' + size, size));
            // 简易
            if (simple) {
                return _react2.default.createElement(
                    'ul',
                    _extends({ className: (0, _classnames3.default)(wrapClassName, _style.prefixCls + '-simple'), unselectable: 'unselectable' }, rest),
                    _react2.default.createElement(_NumberInput2.default, {
                        size: size,
                        min: 1,
                        max: allPages,
                        styleType: 'pagination',
                        parser: function parser(input) {
                            return input.replace(/[^\d]+/g, '');
                        },
                        value: current,
                        onNumberChange: function onNumberChange(number) {
                            return _this2.handleChange(number);
                        },
                        suffix: _react2.default.createElement(
                            'span',
                            { className: _style.prefixCls + '-quick-jumper-text' },
                            '/' + allPages
                        )
                    })
                );
            }

            if (allPages <= 5 + pageBufferSize * 2) {
                for (var i = 1; i <= allPages; i++) {
                    var active = this.state.current === i;
                    pagerList.push(_react2.default.createElement(_Pager2.default, {
                        locale: locale,
                        rootPrefixCls: _style.prefixCls,
                        onClick: this.handleChange,
                        onKeyPress: this.runIfEnter,
                        key: i,
                        page: i,
                        active: active,
                        showTitle: showTitle,
                        itemRender: itemRender
                    }));
                }
            } else {
                var prevItemTitle = showLessItems ? locale.prev3 : locale.prev5;
                var nextItemTitle = showLessItems ? locale.next3 : locale.next5;
                if (showPrevNextJumpers) {
                    jumpPrev = _react2.default.createElement(
                        'li',
                        {
                            title: showTitle ? prevItemTitle : null,
                            key: 'prev',
                            onClick: this.jumpPrev,
                            tabIndex: '0',
                            onKeyPress: this.runIfEnterJumpPrev,
                            className: _style.prefixCls + '-jump-prev'
                        },
                        itemRender(this.getJumpPrevPage(), 'jump-prev', _react2.default.createElement('a', { className: _style.prefixCls + '-item-link' }))
                    );
                    jumpNext = _react2.default.createElement(
                        'li',
                        {
                            title: showTitle ? nextItemTitle : null,
                            key: 'next',
                            tabIndex: '0',
                            onClick: this.jumpNext,
                            onKeyPress: this.runIfEnterJumpNext,
                            className: _style.prefixCls + '-jump-next'
                        },
                        itemRender(this.getJumpNextPage(), 'jump-next', _react2.default.createElement('a', { className: _style.prefixCls + '-item-link' }))
                    );
                }
                lastPager = _react2.default.createElement(_Pager2.default, {
                    locale: locale,
                    last: true,
                    rootPrefixCls: _style.prefixCls,
                    onClick: this.handleChange,
                    onKeyPress: this.runIfEnter,
                    key: allPages,
                    page: allPages,
                    active: false,
                    showTitle: showTitle,
                    itemRender: itemRender
                });
                firstPager = _react2.default.createElement(_Pager2.default, {
                    locale: locale,
                    rootPrefixCls: _style.prefixCls,
                    onClick: this.handleChange,
                    onKeyPress: this.runIfEnter,
                    key: 1,
                    page: 1,
                    active: false,
                    showTitle: showTitle,
                    itemRender: itemRender
                });

                var left = Math.max(1, current - pageBufferSize);
                var right = Math.min(current + pageBufferSize, allPages);

                if (current - 1 <= pageBufferSize) {
                    right = 1 + pageBufferSize * 2;
                }

                if (allPages - current <= pageBufferSize) {
                    left = allPages - pageBufferSize * 2;
                }

                for (var _i = left; _i <= right; _i++) {
                    var _active = current === _i;
                    pagerList.push(_react2.default.createElement(_Pager2.default, {
                        locale: locale,
                        rootPrefixCls: _style.prefixCls,
                        onClick: this.handleChange,
                        onKeyPress: this.runIfEnter,
                        key: _i,
                        page: _i,
                        active: _active,
                        showTitle: showTitle,
                        itemRender: itemRender
                    }));
                }

                if (current - 1 >= pageBufferSize * 2 && current !== 1 + 2) {
                    pagerList[0] = _react2.default.cloneElement(pagerList[0], {
                        className: _style.prefixCls + '-item-after-jump-prev'
                    });
                    pagerList.unshift(jumpPrev);
                }
                if (allPages - current >= pageBufferSize * 2 && current !== allPages - 2) {
                    pagerList[pagerList.length - 1] = _react2.default.cloneElement(pagerList[pagerList.length - 1], {
                        className: _style.prefixCls + '-item-before-jump-next'
                    });
                    pagerList.push(jumpNext);
                }

                if (left !== 1 && showPrevNextJumpers) {
                    pagerList.unshift(firstPager);
                }
                if (right !== allPages && showPrevNextJumpers) {
                    pagerList.push(lastPager);
                }
            }

            var defaultShowTotal = function defaultShowTotal(total) {
                return locale.total + ' ' + total + ' ' + locale.items;
            };

            var prevDisabled = !this.hasPrev();
            var nextDisabled = !this.hasNext();
            return _react2.default.createElement(
                _style.PaginationWrap,
                _extends({
                    size: size,
                    className: wrapClassName,
                    unselectable: 'unselectable',
                    innerRef: this.savePaginationNode
                }, rest),
                showTotal && _react2.default.createElement(
                    'li',
                    { className: _style.prefixCls + '-total' },
                    (0, _isFunction3.default)(showTotal) ? showTotal(total) : defaultShowTotal(total)
                ),
                _react2.default.createElement(
                    'li',
                    {
                        title: showTitle ? locale.prevPage : null,
                        onClick: this.prev,
                        tabIndex: prevDisabled ? null : 0,
                        onKeyPress: this.runIfEnterPrev,
                        className: (!prevDisabled ? '' : _style.prefixCls + '-disabled') + ' ' + _style.prefixCls + '-prev',
                        'aria-disabled': prevDisabled
                    },
                    itemRender(prevPage, 'prev', _react2.default.createElement('a', { className: _style.prefixCls + '-item-link' }))
                ),
                pagerList,
                _react2.default.createElement(
                    'li',
                    {
                        title: showTitle ? locale.nextPage : null,
                        onClick: this.next,
                        tabIndex: nextDisabled ? null : 0,
                        onKeyPress: this.runIfEnterNext,
                        className: (!nextDisabled ? '' : _style.prefixCls + '-disabled') + ' ' + _style.prefixCls + '-next',
                        'aria-disabled': nextDisabled
                    },
                    itemRender(nextPage, 'next', _react2.default.createElement('a', { className: _style.prefixCls + '-item-link' }))
                ),
                _react2.default.createElement(_Options2.default, _extends({
                    locale: locale,
                    rootPrefixCls: _style.prefixCls,
                    changeSize: showSizeChanger ? this.changePageSize : null,
                    current: current,
                    pageSize: pageSize,
                    pageSizeOptions: pageSizeOptions,
                    quickGo: showQuickJumper ? this.handleChange : null,
                    goButton: goButton,
                    size: size,
                    allPages: allPages
                }, optionsProps))
            );
        }
    }]);

    return Pagination;
}(_react.Component), _class2.propTypes = {
    /** 当前页，受控 */
    current: _propTypes2.default.number,
    /** 默认当前页，非受控 */
    defaultCurrent: _propTypes2.default.number,
    /** 总数 */
    total: _propTypes2.default.number,
    /** 自定义展示 total 值 */
    showTotal: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
    /** 每页数量，受控 */
    pageSize: _propTypes2.default.number,
    /** 默认每页数量，非受控 */
    defaultPageSize: _propTypes2.default.number,
    /** 修改回调 */
    onChange: _propTypes2.default.func,
    /** 修改建议回调，如传入的total为10，当前pageSize为10，当前current却为2时会触发 */
    onAdvise: _propTypes2.default.func,
    /** @ignore */
    hideOnSinglePage: _propTypes2.default.bool,
    /** 显示分页数量调节 */
    showSizeChanger: _propTypes2.default.bool,
    /** 是否显示3个 */
    showLessItems: _propTypes2.default.bool,
    /** 分页数量变化回调 */
    onPageSizeChange: _propTypes2.default.func,
    /** 显示更多页面跳转按钮 */
    showPrevNextJumpers: _propTypes2.default.bool,
    /** 显示快速跳转，传入goButton显示跳转按钮 */
    showQuickJumper: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object]),
    /** 显示按钮的title */
    showTitle: _propTypes2.default.bool,
    /** 分页配置 */
    pageSizeOptions: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
    /** 简易分页 */
    simple: _propTypes2.default.bool,
    /** @ignore */
    locale: _propTypes2.default.object,
    /** @ignore */
    className: _propTypes2.default.string,
    /** @ignore */
    itemRender: _propTypes2.default.func,
    /** 尺寸 */
    size: _propTypes2.default.oneOf(Size),
    /** @ignore */
    optionsProps: _propTypes2.default.object
}, _class2.defaultProps = {
    defaultCurrent: 1,
    total: 0,
    defaultPageSize: 10,
    onChange: noop,
    hideOnSinglePage: false,
    showPrevNextJumpers: true,
    showQuickJumper: false,
    showSizeChanger: false,
    showLessItems: false,
    showTitle: true,
    onPageSizeChange: noop,
    itemRender: defaultItemRender,
    size: 'md'
}, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.savePaginationNode = function (node) {
        _this3.paginationNode = node;
    };

    this.calculatePage = function (p, total) {
        total = total === undefined ? _this3.props.total : total;
        var pageSize = p;
        if (typeof pageSize === 'undefined') {
            pageSize = _this3.state.pageSize;
        }
        return Math.max(1, Math.floor((total - 1) / pageSize) + 1);
    };

    this.isValid = function (page) {
        return isInteger(page) && page >= 1 && page !== _this3.state.current;
    };

    this.changePageSize = function (size) {
        var current = _this3.state.current;
        var newCurrent = _this3.calculatePage(size);
        current = current > newCurrent ? newCurrent : current;
        if (typeof size === 'number') {
            if (!('pageSize' in _this3.props)) {
                _this3.setState({
                    pageSize: size
                });
            }
            if (!('current' in _this3.props)) {
                _this3.setState({
                    current: current,
                    currentInputValue: current
                });
            }
        }
        _this3.props.onPageSizeChange(current, size);
    };

    this.handleChange = function (p) {
        var page = p;
        if (_this3.isValid(page)) {
            if (page > _this3.calculatePage()) {
                page = _this3.calculatePage();
            }

            if (!('current' in _this3.props)) {
                _this3.setState({
                    current: page,
                    currentInputValue: page
                });
            }

            var pageSize = _this3.state.pageSize;
            _this3.props.onChange(page, pageSize);

            return page;
        }

        return _this3.state.current;
    };

    this.prev = function () {
        if (_this3.hasPrev()) {
            _this3.handleChange(_this3.state.current - 1);
        }
    };

    this.next = function () {
        if (_this3.hasNext()) {
            _this3.handleChange(_this3.state.current + 1);
        }
    };

    this.jumpPrev = function () {
        _this3.handleChange(_this3.getJumpPrevPage());
    };

    this.jumpNext = function () {
        _this3.handleChange(_this3.getJumpNextPage());
    };

    this.hasPrev = function () {
        return _this3.state.current > 1;
    };

    this.hasNext = function () {
        return _this3.state.current < _this3.calculatePage();
    };

    this.runIfEnter = function (event, callback) {
        for (var _len = arguments.length, restParams = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            restParams[_key - 2] = arguments[_key];
        }

        if (event.key === 'Enter' || event.charCode === 13) {
            callback.apply(undefined, restParams);
        }
    };

    this.runIfEnterPrev = function (e) {
        _this3.runIfEnter(e, _this3.prev);
    };

    this.runIfEnterNext = function (e) {
        _this3.runIfEnter(e, _this3.next);
    };

    this.runIfEnterJumpPrev = function (e) {
        _this3.runIfEnter(e, _this3.jumpPrev);
    };

    this.runIfEnterJumpNext = function (e) {
        _this3.runIfEnter(e, _this3.jumpNext);
    };
}, _temp)) || _class);

Pagination.Size = Size;
exports.default = Pagination;