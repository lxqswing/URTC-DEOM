'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getItemTree = exports.rootPrefix = undefined;

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _findIndex2 = require('lodash/findIndex');

var _findIndex3 = _interopRequireDefault(_findIndex2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _assign2 = require('lodash/assign');

var _assign3 = _interopRequireDefault(_assign2);

var _once2 = require('lodash/once');

var _once3 = _interopRequireDefault(_once2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _dec2, _class, _class2, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _uncontrolled = require('../../decorators/uncontrolled');

var _uncontrolled2 = _interopRequireDefault(_uncontrolled);

var _localeConsumerDecorator = require('../../components/LocaleProvider/localeConsumerDecorator');

var _localeConsumerDecorator2 = _interopRequireDefault(_localeConsumerDecorator);

var _deprecatedLog = require('../../utils/deprecatedLog');

var _deprecatedLog2 = _interopRequireDefault(_deprecatedLog);

var _Checkbox = require('../../components/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _style = require('./style');

var _zh_CN = require('./locale/zh_CN');

var _zh_CN2 = _interopRequireDefault(_zh_CN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var deprecatedLogForTheme = (0, _once3.default)(function () {
    return (0, _deprecatedLog2.default)('Menu theme', 'ThemeProvider');
});
var deprecatedLogForThemeType = (0, _once3.default)(function () {
    return (0, _deprecatedLog2.default)('Menu themeType', 'ThemeProvider');
});

var rootPrefix = exports.rootPrefix = 'root';

var getItemTree = exports.getItemTree = function getItemTree(children) {
    var getTree = function getTree(children, prefix) {
        var items = {};
        var groupTree = {};
        _react2.default.Children.forEach(children, function (child, i) {
            if (!_react2.default.isValidElement(child)) {
                return;
            }
            var childType = child.type;
            var isMenuItem = childType.isMenuItem;
            var isOtherMenuComponent = childType.isMenuSubMenu || childType.isMenuGroup;

            if (isMenuItem) {
                var uid = prefix + '-' + i + '-item';
                items[uid] = child;
            } else if (isOtherMenuComponent) {
                var _uid = prefix + '-' + i + '-group';
                var childGroupTree = getTree(child.props.children, _uid);

                (0, _assign3.default)(groupTree, childGroupTree);
                (0, _assign3.default)(items, childGroupTree[_uid]);
            }
        });
        groupTree[prefix] = items;
        return groupTree;
    };

    return getTree(children, rootPrefix);
};

var Menu = (_dec = (0, _localeConsumerDecorator2.default)({ defaultLocale: _zh_CN2.default, localeName: 'Menu' }), _dec2 = (0, _uncontrolled2.default)({
    valueName: 'selectedKeys'
}), _dec(_class = _dec2(_class = (_temp = _class2 = function (_Component) {
    _inherits(Menu, _Component);

    function Menu(props) {
        _classCallCheck(this, Menu);

        var _this = _possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).call(this, props));

        _initialiseProps.call(_this);

        var children = props.children;

        if ('itemTree' in props) {
            _this.itemTree = props.itemTree;
        } else {
            _this.itemTree = getItemTree(children);
        }
        if ('theme' in props) {
            deprecatedLogForTheme();
        }
        if ('themeType' in props) {
            deprecatedLogForThemeType();
        }
        return _this;
    }

    _createClass(Menu, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var children = nextProps.children;

            if ('itemTree' in nextProps) {
                return this.itemTree = nextProps.itemTree;
            }
            if (children === this.props.children) return;
            this.itemTree = getItemTree(children);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            /* eslint-disable no-unused-vars */
            var _props = this.props,
                selectedKeys = _props.selectedKeys,
                defaultSelectedKeys = _props.defaultSelectedKeys,
                onChange = _props.onChange,
                multiple = _props.multiple,
                selectable = _props.selectable,
                showSelectAll = _props.showSelectAll,
                collapse = _props.collapse,
                children = _props.children,
                theme = _props.theme,
                themeType = _props.themeType,
                itemTree = _props.itemTree,
                locale = _props.locale,
                className = _props.className,
                block = _props.block,
                disabled = _props.disabled,
                rest = _objectWithoutProperties(_props, ['selectedKeys', 'defaultSelectedKeys', 'onChange', 'multiple', 'selectable', 'showSelectAll', 'collapse', 'children', 'theme', 'themeType', 'itemTree', 'locale', 'className', 'block', 'disabled']);
            /* eslint-enable no-unused-vars */


            var allSelectedStatus = this.getAllSelectedStatus(rootPrefix);
            var selectAllCheckbox = multiple && showSelectAll && _react2.default.createElement(
                'div',
                { className: (0, _classnames2.default)(_style.selectallWrapCls, disabled && _style.disabledCls) },
                _react2.default.createElement(
                    _Checkbox2.default,
                    {
                        className: _style.checkboxCls,
                        checked: allSelectedStatus === 'ALL',
                        indeterminate: allSelectedStatus === 'PART',
                        onChange: function onChange(checked) {
                            return _this2.onMultipleSelect(checked, rootPrefix);
                        },
                        size: 'lg',
                        disabled: disabled
                    },
                    locale.selectAll
                )
            );
            return _react2.default.createElement(
                _style.MenuWrap,
                _extends({
                    className: (0, _classnames2.default)(className, _style.prefixCls, multiple ? _style.multipleCls : _style.singleCls, block && _style.blockCls)
                }, rest, collapse),
                _react2.default.createElement(
                    'div',
                    null,
                    selectAllCheckbox,
                    this.renderChildren(children, rootPrefix)
                )
            );
        }
    }]);

    return Menu;
}(_react.Component), _class2.propTypes = {
    /** 选中的菜单项的key，controlled */
    selectedKeys: _propTypes2.default.array,
    /** 默认选中的菜单项的key，uncontrolled */
    defaultSelectedKeys: _propTypes2.default.array,
    /** 选中变化时的回调 */
    onChange: _propTypes2.default.func,
    /** 是否支持多选 */
    multiple: _propTypes2.default.bool,
    /** 是否可选 */
    selectable: _propTypes2.default.bool,
    /** collapse的配置，参考collpase组件 */
    collapse: _propTypes2.default.object,
    /** 是否显示全选，多选时有效 */
    showSelectAll: _propTypes2.default.bool,
    /** 是否使用块元素显示模式，去除宽高限制，撑满容器，去除外阴影、border，方便放置在自定义容器中 */
    block: _propTypes2.default.bool,
    /** 是否禁用 */
    disabled: _propTypes2.default.bool,
    /** 自定义样式 */
    customStyle: _propTypes2.default.shape({
        /** 菜单的最大高度 */
        maxHeight: _propTypes2.default.string
    }),
    /** @ignore */
    theme: _propTypes2.default.any,
    /** @ignore */
    themeType: _propTypes2.default.any,
    /** @ignore */
    children: _propTypes2.default.node,
    /** @ignore */
    itemTree: _propTypes2.default.any,
    /** @ignore */
    locale: _propTypes2.default.object,
    /** @ignore */
    className: _propTypes2.default.string
}, _class2.defaultProps = {
    defaultSelectedKeys: [],
    onChange: function onChange() {},
    selectable: true
}, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.getAllSelectedStatus = function (groupUid) {
        var selectedKeys = _this3.props.selectedKeys;

        if (!selectedKeys || !selectedKeys.length) {
            return 'NONE';
        }

        var items = _this3.itemTree[groupUid];
        var itemKeys = (0, _map3.default)((0, _filter3.default)(items, function (item) {
            return !item.props.disabled;
        }), function (item) {
            return item.type.getItemKey(item);
        });
        var selectedItemKeys = (0, _filter3.default)(itemKeys, function (key) {
            return (0, _findIndex3.default)(selectedKeys, function (selectedKey) {
                return selectedKey === key;
            }) >= 0;
        });

        if (!selectedItemKeys.length) {
            return 'NONE';
        } else if (selectedItemKeys.length < itemKeys.length) {
            return 'PART';
        } else {
            return 'ALL';
        }
    };

    this.getItemSelected = function (itemUid) {
        var selectedKeys = _this3.props.selectedKeys;

        var itemKey = _this3.getItemKey(itemUid);
        return (0, _findIndex3.default)(selectedKeys, function (key) {
            return key === itemKey;
        }) >= 0;
    };

    this.getItemKey = function (itemUid) {
        var item = _this3.itemTree[rootPrefix][itemUid];
        return item.type.getItemKey(item);
    };

    this._selectItem = function () {
        var selectedKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var selected = arguments[1];
        var uid = arguments[2];
        var multiple = _this3.props.multiple;

        var itemKey = _this3.getItemKey(uid);
        var isSelected = _this3.getItemSelected(uid);
        if (multiple) {
            if (isSelected && !selected) {
                return selectedKeys.filter(function (key) {
                    return key !== itemKey;
                });
            } else if (!isSelected && selected) {
                return selectedKeys.concat(itemKey);
            } else {
                return selectedKeys;
            }
        } else {
            return [itemKey];
        }
    };

    this.onSelect = function (selected, uid) {
        var _props2 = _this3.props,
            onChange = _props2.onChange,
            selectedKeys = _props2.selectedKeys,
            selectable = _props2.selectable;

        if (!selectable) {
            return;
        }

        onChange(_this3._selectItem(selectedKeys, selected, uid));
    };

    this.onMultipleSelect = function (selected, groupUid) {
        var _props3 = _this3.props,
            onChange = _props3.onChange,
            _selectedKeys = _props3.selectedKeys,
            selectable = _props3.selectable;

        if (!selectable) {
            return;
        }

        var items = _this3.itemTree[groupUid];

        var selectedKeys = _selectedKeys;
        (0, _each3.default)(items, function (item, uid) {
            if (!item.props.disabled) {
                selectedKeys = _this3._selectItem(selectedKeys, selected, uid);
            }
        });

        onChange(selectedKeys);
    };

    this.renderChildren = function (children, prefix) {
        var _props4 = _this3.props,
            multiple = _props4.multiple,
            globalDisabled = _props4.disabled;

        var renderChildren = function renderChildren(children) {
            var l = _react2.default.Children.count(children) - 1;
            return _react2.default.Children.map(children, function (child, i) {
                if (!_react2.default.isValidElement(child)) {
                    return child;
                }

                var childType = child.type;
                var isMenuItem = childType.isMenuItem;
                var isOtherMenuComponent = childType.isMenuSubMenu || childType.isMenuGroup;
                var isFirst = i === 0;
                var isLast = i === l;
                var className = (0, _classnames2.default)(child.props.className, isFirst && _style.firstCls, isLast && _style.lastCls);
                var disabled = globalDisabled || child.props.disabled;
                if (isMenuItem) {
                    var uid = prefix + '-' + i + '-item';
                    return _react2.default.cloneElement(child, {
                        uid: uid,
                        multiple: multiple,
                        disabled: disabled,
                        selected: _this3.getItemSelected(uid),
                        onSelect: _this3.onSelect,
                        className: className
                    });
                } else if (isOtherMenuComponent) {
                    var _uid2 = prefix + '-' + i + '-group';
                    return _react2.default.cloneElement(child, {
                        uid: _uid2,
                        multiple: multiple,
                        disabled: disabled,
                        allSelectedStatus: _this3.getAllSelectedStatus(_uid2),
                        onMultipleSelect: _this3.onMultipleSelect,
                        renderChildren: function renderChildren(children) {
                            return _this3.renderChildren(children, _uid2);
                        },
                        className: className
                    });
                }

                return child;
            });
        };

        return renderChildren(children);
    };
}, _temp)) || _class) || _class);
exports.default = Menu;