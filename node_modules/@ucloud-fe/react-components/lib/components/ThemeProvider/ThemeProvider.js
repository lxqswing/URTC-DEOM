'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _theme2 = require('./theme');

var _theme3 = _interopRequireDefault(_theme2);

var _runtime = require('./runtime');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ThemeProvider = (_temp = _class = function (_Component) {
    _inherits(ThemeProvider, _Component);

    function ThemeProvider(props) {
        _classCallCheck(this, ThemeProvider);

        var _this = _possibleConstructorReturn(this, (ThemeProvider.__proto__ || Object.getPrototypeOf(ThemeProvider)).call(this, props));

        _initialiseProps.call(_this);

        var theme = _this.getMergedTheme(props.theme);
        _this.cache = JSON.stringify(theme);
        _this.state = {
            theme: theme
        };
        (0, _runtime.setRuntimeTheme)(theme);
        return _this;
    }

    _createClass(ThemeProvider, [{
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var theme = nextProps.theme;

            if (JSON.stringify(theme) !== this.cache) {
                var mergedTheme = this.getMergedTheme(theme);
                this.cache = JSON.stringify(theme);
                this.setState({
                    theme: mergedTheme
                });
                (0, _runtime.setRuntimeTheme)(mergedTheme);
            }
        }
    }, {
        key: 'render',
        value: function render() {
            // eslint-disable-next-line no-unused-vars
            var _props = this.props,
                _theme = _props.theme,
                rest = _objectWithoutProperties(_props, ['theme']);

            var theme = this.state.theme;

            return _react2.default.createElement(_styledComponents.ThemeProvider, _extends({ theme: theme }, rest));
        }
    }]);

    return ThemeProvider;
}(_react.Component), _class.propTypes = {
    theme: _propTypes2.default.object.isRequired
}, _initialiseProps = function _initialiseProps() {
    this.getMergedTheme = function (theme) {
        return (0, _theme2.generateTheme)(theme);
    };

    this.componentWillUnmount = function () {
        (0, _runtime.setRuntimeTheme)(_theme3.default);
    };
}, _temp);
exports.default = ThemeProvider;