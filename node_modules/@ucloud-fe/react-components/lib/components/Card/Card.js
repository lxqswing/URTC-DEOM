'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ContainerContext = require('../../components/Popover/ContainerContext');

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** 卡片布局控件 */
var Card = (_temp2 = _class = function (_PureComponent) {
    _inherits(Card, _PureComponent);

    function Card() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Card);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Card.__proto__ || Object.getPrototypeOf(Card)).call.apply(_ref, [this].concat(args))), _this), _this.savePopupContainer = function (ref) {
            _this.popupContainer = ref;
        }, _this.getPopupContainer = function () {
            return _this.popupContainer && _this.popupContainer.parentNode.parentNode;
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    /** 由于 react 渲染和 ref 的时机，子组件渲染时无法获取到外部的 ref，故使用上层组件做路引 */


    _createClass(Card, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                rest = _objectWithoutProperties(_props, ['children']);

            return _react2.default.createElement(
                _ContainerContext.InhertProvider,
                { value: { getPopupContainer: this.getPopupContainer } },
                _react2.default.createElement(
                    _style.CardWrap,
                    rest,
                    _react2.default.createElement('div', { ref: this.savePopupContainer }),
                    children
                )
            );
        }
    }]);

    return Card;
}(_react.PureComponent), _class.propTypes = {
    /** @ignore */
    children: _propTypes2.default.node
}, _temp2);
exports.default = Card;