'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.confirm = exports.alert = undefined;

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _styledComponents = require('styled-components');

var _Button = require('../../components/Button');

var _Button2 = _interopRequireDefault(_Button);

var _runtime = require('../../components/ThemeProvider/runtime');

var _Modal = require('./Modal');

var _Modal2 = _interopRequireDefault(_Modal);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var pop = function pop(props) {
    var container = document.createElement('div');
    document.body.appendChild(container);
    var destory = function destory() {
        var result = _reactDom2.default.unmountComponentAtNode(container);
        if (result && container.parentElement) {
            container.parentElement.removeChild(container);
        }
    };

    _reactDom2.default.render(_react2.default.createElement(
        _styledComponents.ThemeProvider,
        { theme: (0, _runtime.getRuntimeTheme)() },
        _react2.default.createElement(_Modal2.default, _extends({}, props, { visible: true }))
    ), container);

    return {
        destory: destory
    };
};

var isPromise = function isPromise(promiseLike) {
    return promiseLike && promiseLike.then && (0, _isFunction3.default)(promiseLike.then);
};

var promiseJudgeHandle = function promiseJudgeHandle(promiseLike, handle) {
    if (isPromise(promiseLike)) {
        promiseLike.then(function (res) {
            handle();
            return res;
        });
    } else {
        handle();
    }
};
var alert = function alert(_ref, content) {
    var _ref$onOk = _ref.onOk,
        onOk = _ref$onOk === undefined ? function () {} : _ref$onOk,
        _ref$onClose = _ref.onClose,
        onClose = _ref$onClose === undefined ? function () {} : _ref$onClose,
        rest = _objectWithoutProperties(_ref, ['onOk', 'onClose']);

    var _onClose = function _onClose() {
        return promiseJudgeHandle(onClose(), function () {
            return modal.destory();
        });
    };
    var _onOk = function _onOk() {
        return promiseJudgeHandle(onOk(), function () {
            return modal.destory();
        });
    };
    var AlertFooter = function AlertFooter(_ref2) {
        var locale = _ref2.locale;
        return _react2.default.createElement(
            _Button2.default,
            { size: 'lg', styleType: 'primary', onClick: _onOk },
            locale.confirm
        );
    };
    AlertFooter.propTypes = {
        locale: _propTypes2.default.object.isRequired
    };

    var options = {
        children: content,
        maskClosable: false,
        size: 'sm',
        title: 'Alert',
        onClose: _onClose,
        footer: AlertFooter
    };

    var modal = pop(Object.assign({}, options, rest));
    return modal;
};

var confirm = function confirm(_ref3, content) {
    var _ref3$onOk = _ref3.onOk,
        onOk = _ref3$onOk === undefined ? function () {} : _ref3$onOk,
        _ref3$onClose = _ref3.onClose,
        onClose = _ref3$onClose === undefined ? function () {} : _ref3$onClose,
        rest = _objectWithoutProperties(_ref3, ['onOk', 'onClose']);

    var _onClose = function _onClose() {
        return promiseJudgeHandle(onClose(), function () {
            return modal.destory();
        });
    };
    var _onOk = function _onOk() {
        return promiseJudgeHandle(onOk(), function () {
            return modal.destory();
        });
    };

    var options = {
        children: content,
        maskClosable: false,
        size: 'sm',
        title: 'Confirm',
        onClose: _onClose,
        onOk: _onOk
    };

    var modal = pop(Object.assign({}, options, rest));
    return modal;
};

exports.alert = alert;
exports.confirm = confirm;