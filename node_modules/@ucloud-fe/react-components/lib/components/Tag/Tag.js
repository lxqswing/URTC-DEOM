'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StyleType = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleType = Object.keys(_style.styleMap);

var Tag = (_temp = _class = function (_Component) {
    _inherits(Tag, _Component);

    function Tag() {
        _classCallCheck(this, Tag);

        return _possibleConstructorReturn(this, (Tag.__proto__ || Object.getPrototypeOf(Tag)).apply(this, arguments));
    }

    _createClass(Tag, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                children = _props.children,
                styleType = _props.styleType,
                closable = _props.closable,
                icon = _props.icon,
                disabled = _props.disabled,
                onClose = _props.onClose,
                rest = _objectWithoutProperties(_props, ['children', 'styleType', 'closable', 'icon', 'disabled', 'onClose']);

            return _react2.default.createElement(
                _style.TagWrapper,
                _extends({ styleType: styleType, disabled: disabled }, rest),
                icon && _react2.default.createElement(
                    _style.PrefixIconWrapper,
                    null,
                    typeof icon === 'string' ? _react2.default.createElement(_style.PrefixIcon, { type: icon }) : icon
                ),
                _react2.default.createElement(
                    _style.ContentWrapper,
                    null,
                    children
                ),
                closable && _react2.default.createElement(
                    _style.CloseIconWrapper,
                    { onClick: !disabled && onClose },
                    _react2.default.createElement(_style.CloseIcon, { type: 'cross' })
                )
            );
        }
    }]);

    return Tag;
}(_react.Component), _class.propTypes = {
    /** @ignore */
    children: _propTypes2.default.node,
    /**
     * 样式风格
     */
    styleType: _propTypes2.default.oneOf(StyleType),
    /**
     * 是否显示关闭按钮
     */
    closable: _propTypes2.default.bool,
    /**
     * 关闭回调
     */
    onClose: _propTypes2.default.func,
    /**
     * 自定义前置 icon
     */
    icon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /**
     * 是否禁用
     */
    disabled: _propTypes2.default.bool
}, _temp);
exports.default = Tag;
exports.StyleType = StyleType;


Tag.StyleType = StyleType;