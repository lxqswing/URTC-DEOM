'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SwitchWrap = exports.Line = exports.ButtonWrap = exports.OffText = exports.OnText = exports.Text = exports.Inner = undefined;

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _style = require('../../../style');

var _addDefaultThemeProps = require('../../../components/ThemeProvider/addDefaultThemeProps');

var _addDefaultThemeProps2 = _interopRequireDefault(_addDefaultThemeProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Inner = exports.Inner = _styledComponents2.default.div.withConfig({
    displayName: 'style__Inner',
    componentId: 'hthzin-0'
})(['position:relative;height:100%;width:100%;border-radius:2px;box-sizing:border-box;']);

var Text = exports.Text = _styledComponents2.default.span.withConfig({
    displayName: 'style__Text',
    componentId: 'hthzin-1'
})(['width:100%;height:100%;text-align:center;line-height:22px;box-sizing:border-box;display:block;']);

var OnText = exports.OnText = (0, _styledComponents2.default)(Text).withConfig({
    displayName: 'style__OnText',
    componentId: 'hthzin-2'
})(['']);
var OffText = exports.OffText = (0, _styledComponents2.default)(Text).withConfig({
    displayName: 'style__OffText',
    componentId: 'hthzin-3'
})(['']);

var ButtonWrap = exports.ButtonWrap = _styledComponents2.default.span.withConfig({
    displayName: 'style__ButtonWrap',
    componentId: 'hthzin-4'
})(['position:absolute;display:inline-block;left:-1px;top:-2px;border-radius:2px;box-sizing:border-box;transition:all 0.3s;']);

var Line = exports.Line = _styledComponents2.default.span.withConfig({
    displayName: 'style__Line',
    componentId: 'hthzin-5'
})(['position:absolute;display:inline-block;left:18px;top:4px;width:2px;height:16px;border-radius:1px;transition:all 0.3s;']);

/* stylelint-disable no-duplicate-selectors */
var propsMixin = function propsMixin(_ref) {
    var _ref$theme = _ref.theme,
        DT = _ref$theme.designTokens,
        Height = _ref$theme.Height,
        disabled = _ref.disabled,
        size = _ref.size,
        checked = _ref.checked;

    var switchTheme = {
        Width: {
            sm: '45px',
            md: '80px',
            lg: '100px'
        },
        Padding: {
            sm: '1px',
            md: '4px',
            lg: '4px'
        },
        BorderWidth: {
            sm: '0',
            md: '1px',
            lg: '1px'
        },
        LineLeft: {
            sm: '13px',
            md: '13px',
            lg: '18px'
        }
    };
    switchTheme.BtnSize = {};
    switchTheme.LineHeight = {};
    (0, _each3.default)(['sm', 'md', 'lg'], function (size) {
        var height = +Height[size].replace('px', '');
        var padding = +switchTheme.Padding[size].replace('px', '');
        var borderWidth = +switchTheme.BorderWidth[size].replace('px', '');
        var btnSize = height - padding * 2 - borderWidth * 2 + 2;
        var lineHeight = btnSize - 10;
        switchTheme.BtnSize[size] = btnSize + 'px';
        switchTheme.LineHeight[size] = lineHeight + 'px';
    });
    var Width = switchTheme.Width,
        Padding = switchTheme.Padding,
        BtnSize = switchTheme.BtnSize,
        LineLeft = switchTheme.LineLeft,
        LineHeight = switchTheme.LineHeight,
        BorderWidth = switchTheme.BorderWidth;


    return (0, _styledComponents.css)(['background:', ';height:', ';width:', ';padding:', ';border:1px solid ', ';border-width:', ';', ' ', '{background:', ';box-shadow:', ';width:', ';height:', ';}', '{background:', ';left:', ';height:', ';}', '{color:', ';border:1px solid ', ';box-shadow:', ';background:', ';}', ';', ';', ';', ';', ';'], DT.T_SWITCH_COLOR_BG_OUTER, Height[size], Width[size], Padding[size], DT.T_COLOR_LINE_DEFAULT_DARK, BorderWidth[size], !disabled && (0, _styledComponents.css)([':hover{border-color:', ';', '{box-shadow:', ';}}'], DT.T_COLOR_LINE_PRIMARY_HOVER, ButtonWrap, DT.T_SHADOW_BUTTON_HOVER), ButtonWrap, DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT, DT.T_SHADOW_BUTTON_DEFAULT, BtnSize[size], BtnSize[size], Line, DT.T_COLOR_BG_ERROR_DARK, LineLeft[size], LineHeight[size], Inner, DT.T_SWITCH_COLOR_TEXT_OFF, DT.T_COLOR_LINE_DEFAULT_LIGHT, DT.T_SHADOW_INSET_1, DT.T_SWITCH_COLOR_BG_INNER_OFF, size === 'sm' && (0, _styledComponents.css)(['', ',', '{display:none;}'], /*sc-sel*/OnText, /*sc-sel*/OffText), size === 'md' && (0, _styledComponents.css)(['line-height:16px;', ',', '{line-height:16px;}', '{padding-right:20px;}', '{padding-left:20px;}'], /*sc-sel*/OnText, /*sc-sel */OffText, OnText, OffText), size === 'lg' && (0, _styledComponents.css)(['line-height:22px;', '{padding-right:26px;}', '{padding-left:26px;}'], OnText, OffText), checked ? (0, _styledComponents.css)(['', '{color:', ';border-color:', ';box-shadow:', ';background:', ';}', '{left:100%;margin-left:-', ';}', '{background:', ';}', '{display:none;}'], /* sc-sel */Inner, DT.T_SWITCH_COLOR_TEXT_ON, DT.T_COLOR_LINE_SUCCESS_LIGHT, DT.T_SHADOW_INSET_1, DT.T_SWITCH_COLOR_BG_INNER_ON, /* sc-sel */ButtonWrap, (0, _style.calculateSize)(BtnSize[size], -1), Line, DT.T_COLOR_BG_SUCCESS_DARK, OffText) : (0, _styledComponents.css)(['', '{display:none;}'], OnText), disabled && (0, _styledComponents.css)(['border-color:', ';cursor:not-allowed;', '{color:', ';border-color:', ';box-shadow:none;background:', ';}', '{background:', ';}'], DT.T_COLOR_LINE_DISABLED_DARK, Inner, DT.T_COLOR_TEXT_DISABLED, DT.T_COLOR_LINE_DISABLED_LIGHT, DT.T_COLOR_BG_DISABLED_LIGHT, Line, DT.T_COLOR_BG_DISABLED_DARK));
};

var SwitchWrap = exports.SwitchWrap = _styledComponents2.default.div.withConfig({
    displayName: 'style__SwitchWrap',
    componentId: 'hthzin-6'
})(['position:relative;border-radius:2px;box-sizing:border-box;cursor:pointer;transition:all 0.3s;', ';', ';'], _style.inlineBlockWithVerticalMixin, propsMixin);

(0, _addDefaultThemeProps2.default)(SwitchWrap);