'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.List = exports.Selector = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dec, _class, _class2, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _generateError = require('../../utils/generateError');

var _generateError2 = _interopRequireDefault(_generateError);

var _localeConsumerDecorator = require('../../components/LocaleProvider/localeConsumerDecorator');

var _localeConsumerDecorator2 = _interopRequireDefault(_localeConsumerDecorator);

var _Selector = require('./Selector');

var _Selector2 = _interopRequireDefault(_Selector);

var _List = require('./List');

var _List2 = _interopRequireDefault(_List);

var _zh_CN = require('./locale/zh_CN');

var _zh_CN2 = _interopRequireDefault(_zh_CN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var fileShape = _propTypes2.default.shape({
    name: _propTypes2.default.string.isRequired,
    uid: _propTypes2.default.string.isRequired,
    size: _propTypes2.default.number,
    type: _propTypes2.default.string,
    status: _propTypes2.default.string
});

/**
 * 文件上传控件
 */
var Upload = (_dec = (0, _localeConsumerDecorator2.default)({ defaultLocale: _zh_CN2.default, localeName: 'Upload' }), _dec(_class = (_temp = _class2 = function (_PureComponent) {
    _inherits(Upload, _PureComponent);

    function Upload(props) {
        _classCallCheck(this, Upload);

        /** 判定组件是否为controlled */
        var _this = _possibleConstructorReturn(this, (Upload.__proto__ || Object.getPrototypeOf(Upload)).call(this, props));

        _this.componentWillReceiveProps = function (nextProps) {
            /** 检查props是否更改了controlled类型 */
            /* eslint-disable no-console */
            if (!_this.IS_CONTROLLED && nextProps.fileList !== undefined) {
                console.error('You are changing a uncontrolled Upload to be controlled, which may cause a lot of problem');
            } else if (_this.IS_CONTROLLED && nextProps.fileList === undefined) {
                console.error('You are changing a controlled Upload to be uncontrolled, which may cause a lot of problem');
            }
            /* eslint-enable no-console */
        };

        _this.onSingleSelect = function (files) {
            var _this$props = _this.props,
                onAdd = _this$props.onAdd,
                onRemove = _this$props.onRemove;

            if (!files.length) return;

            var fileList = _this.getFileList();
            if (fileList.length) {
                var file = fileList[0];
                if (onRemove(file, 0) === false) {
                    return;
                }
            }

            fileList = [files[0]];
            if (onAdd(fileList) === false) {
                return;
            }

            _this.onChange(fileList, function () {
                return _this.handleFilesUpload(fileList);
            });
        };

        _this.onAdd = function (files) {
            var _this$props2 = _this.props,
                maxCount = _this$props2.maxCount,
                onAdd = _this$props2.onAdd;

            if (onAdd(files) === false) {
                return;
            }
            var fileList = _this.getFileList();
            if (fileList.length + files.length > maxCount) {
                _this.onError((0, _generateError2.default)('max file count is ' + maxCount, 'FileMaxCountError'));
                return;
            }
            fileList = fileList.concat(files);
            _this.onChange(fileList, function () {
                return _this.handleFilesUpload(files);
            });
        };

        _this.handleFilesUpload = function (files) {
            var handleUpload = _this.props.handleUpload;

            if (!handleUpload) return;
            files.forEach(function (file) {
                file.status = 'uploading';
                handleUpload(file).then(function () {
                    file.status = 'success';
                }).catch(function () {
                    file.status = 'error';
                }).then(function () {
                    _this.onChange(_this.getFileList());
                });
            });
            _this.onChange(_this.getFileList());
        };

        _this.onRemove = function (file, index) {
            var onRemove = _this.props.onRemove;

            if (onRemove(file, index) === false) {
                return;
            }
            var fileList = _this.getFileList();
            fileList.splice(index, 1);
            _this.onChange(fileList);
        };

        _this.onChange = function (fileList, cb) {
            if (!_this.IS_CONTROLLED) {
                _this.onUnControlledChange(fileList, cb);
            } else {
                _this.onControlledChange(fileList, cb);
            }
        };

        _this.onUnControlledChange = function (fileList, cb) {
            var onChange = _this.props.onChange;

            _this.setState({
                fileList: fileList
            }, function () {
                onChange(fileList);
                cb && cb();
            });
        };

        _this.onControlledChange = function (fileList) {
            var onChange = _this.props.onChange;

            onChange(fileList);
        };

        _this.onError = function (error) {
            var onError = _this.props.onError;

            onError(error);
        };

        _this.getFileList = function () {
            return (_this.props.fileList || _this.state.fileList).slice();
        };

        if (props.fileList !== undefined) {
            if (props.defaultFileList !== undefined) {
                // eslint-disable-next-line no-console
                console.error('You can only use one of fileList and defaultFileList');
            }
            _this.IS_CONTROLLED = true;
        }
        _this.state = {
            fileList: props.fileList || props.defaultFileList || []
        };
        return _this;
    }

    /** 单选 */

    /** 处理添加文件 */

    /** 处理文件上传 */

    /** 处理删除文件 */

    /** 处理change */

    /** 非受控处理change */

    /** 受控组件处理change */

    /** 处理错误 */

    /** 获取文件列表 */


    _createClass(Upload, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                disabled = _props.disabled,
                multiple = _props.multiple,
                accept = _props.accept,
                maxSize = _props.maxSize,
                selector = _props.selector,
                listType = _props.listType,
                onPreview = _props.onPreview,
                locale = _props.locale,
                rest = _objectWithoutProperties(_props, ['disabled', 'multiple', 'accept', 'maxSize', 'selector', 'listType', 'onPreview', 'locale']);
            /** clean unused rest props for div */


            ['maxCount', 'onChange', 'onAdd', 'onRemove', 'handleUpload', 'onError', 'defaultFileList', 'fileList'].forEach(function (key) {
                delete rest[key];
            });
            var fileList = this.getFileList();
            return _react2.default.createElement(
                'div',
                rest,
                _react2.default.createElement(_Selector2.default, {
                    onSelect: multiple ? this.onAdd : this.onSingleSelect,
                    onError: this.onError,
                    disabled: disabled,
                    multiple: multiple,
                    accept: accept,
                    maxSize: maxSize,
                    selector: selector,
                    locale: locale
                }),
                listType !== 'none' && _react2.default.createElement(_List2.default, {
                    fileList: fileList,
                    onRemove: this.onRemove,
                    onPreview: onPreview,
                    handleReupload: function handleReupload(file) {
                        return _this2.handleFilesUpload([file]);
                    },
                    disabled: disabled,
                    locale: locale
                })
            );
        }
    }]);

    return Upload;
}(_react.PureComponent), _class2.propTypes = {
    /**
     * 文件列表变化时的回调，如新增、删除等操作
     * @param {Object[]} fileList - 文件列表
     * @param {string} fileList[].name - 文件名称
     * @param {string} fileList[].uid - 文件uid
     * @param {number} fileList[].size - 文件的大小
     * @param {string} fileList[].type - 文件的类型，MIME
     * @param {string} fileList[].status - 文件的上传状态，只有传入handleUpload时才有的属性[uploading,success,error]
     */
    onChange: _propTypes2.default.func,
    /**
     * 正在添加文件时的回调
     * @param {Object[]} fileList - 文件列表
     * @returns 是否应用添加操作，返回false时不触发添加
     */
    onAdd: _propTypes2.default.func,
    /**
     * 正在删除文件时的回调
     * @param {Object} file - 删除的文件
     * @param {number} index - 删除文件的索引
     * @returns 是否应用删除操作，返回false时不触发删除
     */
    onRemove: _propTypes2.default.func,
    /**
     * 选中或读取文件错误回调
     * @param {Object} error - 错误信息
     * @param {string} error.message - 错误的具体信息
     * @param {string} error.name - 错误的类型，包括FileTypeError-文件类型错误、FileSizeError-文件大小错误、FileMaxCountError-文件数量错误，以及其他可能出现的原生错误
     */
    onError: _propTypes2.default.func,
    /**
     * 预览操作
     * @param {Object} file - 预览的文件
     * @param {number} index - 预览文件的索引
     */
    onPreview: _propTypes2.default.func,
    /**
     * 定义上传操作，受控组件中不起作用请自行处理
     * @param {Object} file - 上传的文件
     */
    handleUpload: _propTypes2.default.func,
    /** 是否禁用 */
    disabled: _propTypes2.default.bool,
    /** 是否可以多选 */
    multiple: _propTypes2.default.bool,
    /**
     * 可接受的文件类型, MIME
     * [input accept](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept)
     */
    accept: _propTypes2.default.string,
    /** 文件大小限制 */
    maxSize: _propTypes2.default.number,
    /** 文件数量限制 */
    maxCount: _propTypes2.default.number,
    /** 自定义选择控件 */
    selector: _propTypes2.default.node,
    /**
     * 文件列表展示类型
     *
     * none - 隐藏文件列表
     * text - 展示文件名称列表
     */
    listType: _propTypes2.default.oneOf(['none', 'text']),
    /** 默认文件列表，非受控组件使用，初始化时才有效 */
    defaultFileList: _propTypes2.default.arrayOf(fileShape),
    /** 文件列表，传入后变为受控组件 */
    fileList: _propTypes2.default.arrayOf(fileShape),
    /** @ignore */
    className: _propTypes2.default.string,
    /** @ignore */
    locale: _propTypes2.default.object
}, _class2.defaultProps = {
    onChange: function onChange() {},
    onAdd: function onAdd() {},
    onRemove: function onRemove() {},
    onError: function onError() {},
    listType: 'text'
}, _temp)) || _class);
exports.default = Upload;
exports.Selector = _Selector2.default;
exports.List = _List2.default;