'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _generateError = require('../../utils/generateError');

var _generateError2 = _interopRequireDefault(_generateError);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** 检查文件类型和大小 */
var checkFile = function checkFile(file) {
    var accept = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '*';
    var maxSize = arguments[2];

    var types = accept.split(/\s*,\s*/);
    var typeCheckPass = false;
    for (var index in types) {
        var type = types[index];
        var regexp = void 0,
            pass = void 0;
        if (/^\./.test(type)) {
            regexp = new RegExp(type.replace('.', '\\.') + '$');
            pass = regexp.test(file.name);
        } else {
            regexp = new RegExp(type.replace('*', '.*').replace('.', '\\.'));
            pass = regexp.test(file.type);
        }
        if (pass) {
            typeCheckPass = true;
            break;
        }
    }
    var sizeCheckPass = maxSize === undefined || file.size <= maxSize;
    if (!typeCheckPass) {
        return (0, _generateError2.default)('file ' + file.name + ' type is not accepted', 'FileTypeError');
    }
    if (!sizeCheckPass) {
        return (0, _generateError2.default)('file ' + file.name + ' size is to big', 'FileSizeError');
    }
    return true;
};

/**
 * 文件选择控件
 */
var Selector = (_temp2 = _class = function (_PureComponent) {
    _inherits(Selector, _PureComponent);

    function Selector() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, Selector);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Selector.__proto__ || Object.getPrototypeOf(Selector)).call.apply(_ref, [this].concat(args))), _this), _this.trigger = function () {
            _this._trigger && _this._trigger.click();
        }, _this.cleanTrigger = function () {
            _this._trigger && (_this._trigger.value = '');
        }, _this.onChange = function (e) {
            var _this$props = _this.props,
                onSelect = _this$props.onSelect,
                onError = _this$props.onError,
                accept = _this$props.accept,
                maxSize = _this$props.maxSize;

            var files = [].slice.call(e.target.files);
            _this.cleanTrigger();
            for (var index in files) {
                var file = files[index];
                var checkResult = checkFile(file, accept, maxSize);
                if (checkResult !== true) {
                    onError(checkResult);
                    return;
                }
                file.uid = (0, _uniqueId3.default)('__file_uid_for_upload_components__');
            }
            onSelect(files);
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    /**
     * 触发选择操作
     * @public
     */

    /** 清空触发器 */


    _createClass(Selector, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                disabled = _props.disabled,
                multiple = _props.multiple,
                accept = _props.accept,
                selector = _props.selector,
                locale = _props.locale,
                rest = _objectWithoutProperties(_props, ['disabled', 'multiple', 'accept', 'selector', 'locale']);

            return _react2.default.createElement(
                _style.SelectorWrap,
                _extends({ onClick: this.trigger, disabled: disabled }, rest),
                _react2.default.createElement('input', {
                    type: 'file',
                    hidden: true,
                    ref: function ref(_ref2) {
                        return _this2._trigger = _ref2;
                    },
                    onChange: this.onChange,
                    disabled: disabled,
                    multiple: multiple,
                    accept: accept
                }),
                selector ? selector : [_react2.default.createElement(
                    _Button2.default,
                    { size: 'md', styleType: 'primary', disabled: disabled, key: 'button' },
                    locale.selectFile
                ), _react2.default.createElement(
                    _style.TipWrap,
                    { key: 'tip' },
                    locale.selectFileTip
                )]
            );
        }
    }]);

    return Selector;
}(_react.PureComponent), _class.propTypes = {
    /** 选取文件回调函数 */
    onSelect: _propTypes2.default.func,
    /** 选中或读取文件错误回调 */
    onError: _propTypes2.default.func,
    /** 自定义触发图片选择的选择控件 */
    selector: _propTypes2.default.node,
    /** 是否禁用 */
    disabled: _propTypes2.default.bool,
    /** 是否可以多选 */
    multiple: _propTypes2.default.bool,
    /** 可接受的文件类型，MIME，见Upload */
    accept: _propTypes2.default.string,
    /** 文件大小限制 */
    maxSize: _propTypes2.default.number,
    /** @ignore */
    locale: _propTypes2.default.object
}, _class.defaultProps = {
    onSelect: function onSelect() {},
    onError: function onError() {}
}, _temp2);
exports.default = Selector;