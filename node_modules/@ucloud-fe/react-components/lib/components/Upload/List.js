'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Icon = require('../Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var getIconName = function getIconName(status) {
    return {
        uploading: 'loading',
        success: 'circle-check',
        error: 'circle-mark'
    }[status];
};

/**
 * 文件列表控件
 */
var List = (_temp2 = _class = function (_PureComponent) {
    _inherits(List, _PureComponent);

    function List() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, List);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = List.__proto__ || Object.getPrototypeOf(List)).call.apply(_ref, [this].concat(args))), _this), _this.renderFileItem = function (file, index, disabled) {
            var _this$props = _this.props,
                onRemove = _this$props.onRemove,
                onPreview = _this$props.onPreview,
                handleReupload = _this$props.handleReupload;

            var action = [disabled || file.status !== 'error' || !handleReupload ? null : _react2.default.createElement(_style.UploadIcon, { key: 'reload', type: 'reload', onClick: function onClick() {
                    return handleReupload(file);
                } }), disabled || file.status === 'uploading' ? null : _react2.default.createElement(_style.UploadIcon, { key: 'remove', type: 'cross', onClick: function onClick() {
                    return onRemove(file, index);
                } })];
            var icon = file.status ? _react2.default.createElement(_Icon2.default, { type: getIconName(file.status), spin: file.status === 'uploading' }) : null;
            return _react2.default.createElement(
                _style.UploadNotice,
                { key: file.uid, icon: icon, onPreview: onPreview, action: action, closable: false },
                _react2.default.createElement(
                    'a',
                    { onClick: function onClick() {
                            return onPreview && onPreview(file, index);
                        } },
                    file.name
                )
            );
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }
    /** 渲染列表项 */


    _createClass(List, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                fileList = _props.fileList,
                _props$renderFileItem = _props.renderFileItem,
                renderFileItem = _props$renderFileItem === undefined ? this.renderFileItem : _props$renderFileItem,
                disabled = _props.disabled,
                locale = _props.locale;

            return _react2.default.createElement(
                _style.ListWrap,
                null,
                fileList.length ? fileList.map(function (file, index) {
                    return renderFileItem(file, index, disabled);
                }) : _react2.default.createElement(
                    _style.UploadNotice,
                    { closable: false, icon: null },
                    locale.emptyTip
                )
            );
        }
    }]);

    return List;
}(_react.PureComponent), _class.propTypes = {
    /** 文件列表 */
    fileList: _propTypes2.default.array,
    /** 渲染文件列表项 */
    renderFileItem: _propTypes2.default.func,
    /** 删除文件 */
    onRemove: _propTypes2.default.func,
    /** 自定义预览文件 */
    onPreview: _propTypes2.default.func,
    /** 重新上传文件 */
    handleReupload: _propTypes2.default.func,
    /** 是否禁用 */
    disabled: _propTypes2.default.bool,
    /** @ignore */
    locale: _propTypes2.default.object
}, _class.defaultProps = {
    onError: function onError() {},
    onRemove: function onRemove() {}
}, _temp2);
exports.default = List;