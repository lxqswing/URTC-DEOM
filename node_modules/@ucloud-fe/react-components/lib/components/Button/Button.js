'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StyleType = ['primary', 'border', 'border-gray'];
var Size = ['sm', 'md', 'lg'];
var Shape = ['circle', 'square'];

var Button = (_temp = _class = function (_PureComponent) {
    _inherits(Button, _PureComponent);

    function Button() {
        _classCallCheck(this, Button);

        return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
    }

    _createClass(Button, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                loading = _props.loading,
                icon = _props.icon,
                children = _props.children,
                rest = _objectWithoutProperties(_props, ['loading', 'icon', 'children']);

            var btnIcon = null;
            if ((0, _isString3.default)(icon)) {
                btnIcon = _react2.default.createElement(_style.ButtonIcon, { type: icon });
            } else {
                btnIcon = icon;
            }
            if (loading) {
                btnIcon = _react2.default.createElement(_style.ButtonIcon, { type: 'loading', spin: true });
            }
            return _react2.default.createElement(
                _style.ButtonWrap,
                _extends({ loading: loading }, rest),
                btnIcon,
                children
            );
        }
    }]);

    return Button;
}(_react.PureComponent), _class.propTypes = {
    /** 按钮类型 */
    styleType: _propTypes2.default.oneOf(StyleType),
    /** 按钮尺寸 */
    size: _propTypes2.default.oneOf(Size),
    /** 形状 */
    shape: _propTypes2.default.oneOf(Shape),
    /** 是否加载中 */
    loading: _propTypes2.default.bool,
    /**
     * 伪装disabled，配合disabled一起使用。
     *
     * 添加后disabled时除了onClick事件，其它的事件会正常触发，且生成的button上不会出现disabled属性。
     *
     * button的disabled会将所有事件全部屏蔽，有时会导致一些问题，比如tooltip里嵌入disabled button时，无法获取事件导致无法正常显示。
     */
    fakeDisabled: _propTypes2.default.bool,
    /** 图标，传入string时为图标类型，也可直接传入图标组件，需要图标位置等更多自定义请直接放在children中 */
    icon: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** 设置原生的button上type属性 */
    type: _propTypes2.default.string,
    /**
     * @ignore
     * 是否可选中，样式会有区别
     */
    checkAble: _propTypes2.default.bool,
    /**
     * @ignore
     * 选中状态
     */
    checked: _propTypes2.default.bool,
    /** @ignore */
    className: _propTypes2.default.string,
    /** @ignore */
    children: _propTypes2.default.node
}, _class.defaultProps = {
    styleType: 'border',
    size: 'md',
    type: 'button'
}, _temp);
exports.default = Button;


Object.assign(Button, {
    StyleType: StyleType,
    Size: Size,
    Shape: Shape
});