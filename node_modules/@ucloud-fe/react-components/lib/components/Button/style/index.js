'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ButtonIcon = exports.ButtonWrap = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Icon = require('../../../components/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _config = require('../../../config');

var _config2 = _interopRequireDefault(_config);

var _style = require('../../../style');

var _addDefaultThemeProps = require('../../../components/ThemeProvider/addDefaultThemeProps');

var _addDefaultThemeProps2 = _interopRequireDefault(_addDefaultThemeProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var _prefixCls = _config2.default.prefixCls;

var prefixCls = _prefixCls + '-button';

var sizeMixin = function sizeMixin(_ref) {
    var size = _ref.size,
        _ref$theme = _ref.theme,
        Height = _ref$theme.Height,
        Padding = _ref$theme.Padding;
    return (0, _styledComponents.css)(['height:', ';padding:0 ', ';'], Height[size], Padding[size]);
};

var styleTypeMixin = function styleTypeMixin(_ref2) {
    var _ref2$theme = _ref2.theme,
        DT = _ref2$theme.designTokens,
        materialVars = _ref2$theme.materialVars,
        PaddingNumber = _ref2$theme.PaddingNumber,
        styleType = _ref2.styleType,
        checkAble = _ref2.checkAble,
        size = _ref2.size;

    var styleTypeTheme = {
        primary: {
            color: DT.T_BUTTON_PRIMARY_COLOR_TEXT_DEFAULT,
            fill: DT.T_BUTTON_PRIMARY_COLOR_TEXT_DEFAULT,
            border: 'none',
            background: DT.T_BUTTON_PRIMARY_COLOR_BG_DEFAULT,
            boxShadow: DT.T_SHADOW_BUTTON_PRIMARY,
            transition: 'all ' + materialVars.transitionUp,
            ':hover': {
                background: DT.T_BUTTON_PRIMARY_COLOR_BG_HOVER,
                boxShadow: DT.T_SHADOW_BUTTON_PRIMARY_HOVER
            }
        },
        border: {
            color: DT.T_COLOR_TEXT_DEFAULT_DARK,
            fill: DT.T_COLOR_TEXT_DEFAULT_DARK,
            background: DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT,
            border: 'none',
            boxShadow: DT.T_SHADOW_BUTTON_DEFAULT,
            transition: 'all ' + materialVars.transitionUp,
            ':hover': {
                color: DT.T_COLOR_TEXT_PRIMARY_DEFAULT,
                background: DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT,
                boxShadow: DT.T_SHADOW_BUTTON_HOVER
            }
        },
        'border-gray': {
            color: DT.T_COLOR_TEXT_DEFAULT_LIGHT,
            fill: DT.T_COLOR_TEXT_DEFAULT_LIGHT,
            borderColor: DT.T_COLOR_LINE_DEFAULT_LIGHT,
            background: DT.T_COLOR_BG_DEFAULT_LIGHT,
            transition: 'all ' + materialVars.transitionFlat,
            ':hover': {
                color: DT.T_COLOR_TEXT_PRIMARY_DEFAULT,
                borderColor: DT.T_COLOR_LINE_PRIMARY_HOVER,
                background: checkAble ? DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT : DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT
            }
        }
    };
    return (0, _styledComponents.css)(['', ';', ';'], styleTypeTheme[styleType], styleType === 'border-gray' && (0, _styledComponents.css)(['padding-left:', 'px;padding-right:', 'px;'], PaddingNumber[size] - 1, PaddingNumber[size] - 1));
};

var shapeCircleMixin = function shapeCircleMixin(_ref3) {
    var size = _ref3.size,
        Height = _ref3.theme.Height;
    return (0, _styledComponents.css)(['border-radius:50% !important;padding:0;overflow:hidden;width:', ';'], Height[size]);
};

var shapeSquareMixin = function shapeSquareMixin(_ref4) {
    var size = _ref4.size,
        Height = _ref4.theme.Height;
    return (0, _styledComponents.css)(['padding:0;overflow:hidden;width:', ';'], Height[size]);
};

var loadingMixin = function loadingMixin(_ref5) {
    var DT = _ref5.theme.designTokens;
    return (0, _styledComponents.css)(['position:relative;pointer-events:none;&:before{position:absolute;top:-1px;left:-1px;bottom:-1px;right:-1px;background:', ';opacity:0.6;content:\'\';border-radius:inherit;z-index:1;transition:opacity 0.2s;}'], DT.T_BUTTON_COMMON_COLOR_MASK);
};

var disabledMixin = function disabledMixin(_ref6) {
    var DT = _ref6.theme.designTokens;
    return (0, _styledComponents.css)(['&&{border-color:', ';background:', ';color:', ';fill:', ';cursor:not-allowed;border-width:', ';border-style:solid;box-shadow:none;}'], DT.T_COLOR_LINE_DISABLED_LIGHT, DT.T_COLOR_BG_DISABLED_LIGHT, DT.T_COLOR_TEXT_DISABLED, DT.T_COLOR_TEXT_DISABLED, DT.T_LINE_WIDTH_BASE);
};

var checkedMixin = function checkedMixin(_ref7) {
    var DT = _ref7.theme.designTokens;
    return (0, _styledComponents.css)(['color:', ';fill:', ';background:', ';border-color:', ';box-shadow:', ';'], DT.T_COLOR_TEXT_PRIMARY_DEFAULT, DT.T_COLOR_TEXT_PRIMARY_DEFAULT, DT.T_BUTTON_SECONDARY_COLOR_BG_DEFAULT, DT.T_COLOR_LINE_PRIMARY_DEFAULT, DT.T_SHADOW_BUTTON_HOVER);
};

// eslint-disable-next-line react/prop-types, no-unused-vars
var Button = function Button(_ref8) {
    var loading = _ref8.loading,
        styleType = _ref8.styleType,
        theme = _ref8.theme,
        disabled = _ref8.disabled,
        fakeDisabled = _ref8.fakeDisabled,
        onClick = _ref8.onClick,
        checkAble = _ref8.checkAble,
        rest = _objectWithoutProperties(_ref8, ['loading', 'styleType', 'theme', 'disabled', 'fakeDisabled', 'onClick', 'checkAble']);

    return _react2.default.createElement('button', _extends({ disabled: disabled && !fakeDisabled, onClick: !disabled ? onClick : null }, rest));
};

var ButtonWrap = exports.ButtonWrap = (0, _styledComponents2.default)(Button).attrs({
    className: function className(_ref9) {
        var size = _ref9.size,
            styleType = _ref9.styleType,
            shape = _ref9.shape,
            loading = _ref9.loading,
            disabled = _ref9.disabled,
            fakeDisabled = _ref9.fakeDisabled,
            checked = _ref9.checked;
        return (0, _classnames2.default)(prefixCls, prefixCls + '-size-' + size, prefixCls + '-styletype-' + styleType, shape && prefixCls + '-' + shape, loading && prefixCls + '-loading', disabled && prefixCls + '-disabled', fakeDisabled && prefixCls + '-disabled-fake', checked && prefixCls + '-checked');
    }
})(function (_ref10) {
    var DT = _ref10.theme.designTokens,
        loading = _ref10.loading,
        shape = _ref10.shape,
        disabled = _ref10.disabled,
        checked = _ref10.checked;
    return (0, _styledComponents.css)(['margin:0;box-sizing:border-box;border-radius:', ';border-width:', ';border-style:solid;text-align:center;text-decoration:none;cursor:pointer;outline:none;font-size:', ';', ';', ';', ';', ';', ';', ';', ';', ';'], DT.T_CORNER_SM, DT.T_LINE_WIDTH_BASE, DT.T_TYPO_FONT_SIZE_1, _style.inlineBlockWithVerticalMixin, sizeMixin, styleTypeMixin, shape === 'circle' && shapeCircleMixin, shape === 'square' && shapeSquareMixin, loading && loadingMixin, checked && checkedMixin, disabled && disabledMixin);
});

var ButtonIcon = exports.ButtonIcon = (0, _styledComponents2.default)(_Icon2.default).attrs({
    className: prefixCls + '-icon'
}).withConfig({
    displayName: 'style__ButtonIcon',
    componentId: 'sc-108tx8u-0'
})(['']);

(0, _addDefaultThemeProps2.default)(ButtonWrap);