'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Button = require('../../components/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Menu = require('../../components/Menu');

var _Menu2 = _interopRequireDefault(_Menu);

var _Popover = require('../../components/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Size = ['sm', 'md', 'lg'];
var ButtonStyleType = _Button2.default.StyleType;
var ActionList = (_temp2 = _class = function (_Component) {
    _inherits(ActionList, _Component);

    function ActionList() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, ActionList);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ActionList.__proto__ || Object.getPrototypeOf(ActionList)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.renderButtonList = function (list, size) {
            var buttonStyleType = _this.props.buttonStyleType;

            return list.map(function (info, i) {
                var label = info.label,
                    rest = _objectWithoutProperties(info, ['label']);

                return _react2.default.createElement(
                    _style.ActionButton,
                    _extends({ key: i, size: size, styleType: buttonStyleType }, rest),
                    label
                );
            });
        }, _this.handleDisabledClick = function (e) {
            if (e) {
                e.stopPropagation();
                e.preventDefault();
            }
        }, _this.renderMenu = function (list, size) {
            if (!list.length) {
                return null;
            }
            var _this$props = _this.props,
                buttonStyleType = _this$props.buttonStyleType,
                popoverProps = _this$props.popoverProps;
            var visible = _this.state.visible;

            var renderList = function renderList(list) {
                return list.map(function (info, i) {
                    if (info.children) {
                        return _react2.default.createElement(
                            _Menu2.default.SubMenu,
                            { key: i, styleType: 'popover', title: info.label },
                            renderList(info.children)
                        );
                    }

                    var label = info.label,
                        disabled = info.disabled,
                        onClick = info.onClick,
                        rest = _objectWithoutProperties(info, ['label', 'disabled', 'onClick']);

                    return _react2.default.createElement(
                        _Menu2.default.Item,
                        _extends({
                            key: i,
                            disabled: disabled,
                            onClick: disabled ? _this.handleDisabledClick : onClick
                        }, rest),
                        label
                    );
                });
            };
            return _react2.default.createElement(
                _Popover2.default,
                _extends({
                    trigger: ['click']
                }, popoverProps, {
                    visible: visible,
                    onVisibleChange: function onVisibleChange(visible) {
                        return _this.setState({ visible: visible });
                    },
                    forwardPopupContainer: function forwardPopupContainer(triggerNode) {
                        return triggerNode.parentNode;
                    },
                    popup: _react2.default.createElement(
                        _Menu2.default,
                        {
                            selectable: false,
                            onClick: function onClick() {
                                return _this.setState({ visible: false });
                            },
                            customStyle: { maxHeight: '380px' }
                        },
                        renderList(list)
                    )
                }),
                _react2.default.createElement(_Button2.default, { size: size, styleType: buttonStyleType, icon: 'ellipsis' })
            );
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(ActionList, [{
        key: 'render',
        value: function render() {
            // eslint-disable-next-line no-unused-vars
            var _props = this.props,
                actionList = _props.actionList,
                exposeCount = _props.exposeCount,
                size = _props.size,
                smart = _props.smart,
                buttonStyleType = _props.buttonStyleType,
                popoverProps = _props.popoverProps,
                rest = _objectWithoutProperties(_props, ['actionList', 'exposeCount', 'size', 'smart', 'buttonStyleType', 'popoverProps']);

            var l = actionList.length;
            var buttonList = void 0,
                menuList = void 0;
            if (l > exposeCount + 1) {
                buttonList = actionList.slice(0, exposeCount);
                menuList = actionList.slice(exposeCount);
            } else if (l === exposeCount + 1) {
                if (smart) {
                    buttonList = actionList;
                    menuList = [];
                } else {
                    buttonList = actionList.slice(0, exposeCount);
                    menuList = actionList.slice(exposeCount);
                }
            } else {
                buttonList = actionList;
                menuList = [];
            }
            return _react2.default.createElement(
                'ul',
                rest,
                this.renderButtonList(buttonList, size),
                this.renderMenu(menuList, size)
            );
        }
    }]);

    return ActionList;
}(_react.Component), _class.propTypes = {
    /** 操作列表 */
    actionList: _propTypes2.default.array.isRequired,
    /** 暴露的操作数量 */
    exposeCount: _propTypes2.default.number,
    /** 控件尺寸 */
    size: _propTypes2.default.oneOf(Size),
    /** 按钮样式类别，参考Button的styleType */
    buttonStyleType: _propTypes2.default.oneOf(ButtonStyleType),
    /** 操作数量等于exposeCount+1时是否直接显示按钮而不是显示下拉菜单 */
    smart: _propTypes2.default.bool,
    /** 弹出层的popover props */
    popoverProps: _propTypes2.default.object
}, _class.defaultProps = {
    exposeCount: 3,
    size: 'sm',
    buttonStyleType: 'border',
    smart: true
}, _temp2);
exports.default = ActionList;

ActionList.Size = Size;