'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.prefixCls = exports.TableContext = exports.placeholderKey = exports.deprecatedLogForOnRowSelect = undefined;

var _extend2 = require('lodash/extend');

var _extend3 = _interopRequireDefault(_extend2);

var _findLastIndex2 = require('lodash/findLastIndex');

var _findLastIndex3 = _interopRequireDefault(_findLastIndex2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _filter2 = require('lodash/filter');

var _filter3 = _interopRequireDefault(_filter2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _clone2 = require('lodash/clone');

var _clone3 = _interopRequireDefault(_clone2);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _once2 = require('lodash/once');

var _once3 = _interopRequireDefault(_once2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _dec, _class2, _class3, _temp2, _initialiseProps;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _createReactContext = require('create-react-context');

var _createReactContext2 = _interopRequireDefault(_createReactContext);

var _rcTable = require('../../libs/rc-table');

var _rcTable2 = _interopRequireDefault(_rcTable);

var _deprecatedLog = require('../../utils/deprecatedLog');

var _deprecatedLog2 = _interopRequireDefault(_deprecatedLog);

var _Pagination = require('../../components/Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

var _Notice = require('../../components/Notice');

var _Notice2 = _interopRequireDefault(_Notice);

var _Checkbox = require('../../components/Checkbox');

var _Checkbox2 = _interopRequireDefault(_Checkbox);

var _Radio = require('../../components/Radio');

var _Radio2 = _interopRequireDefault(_Radio);

var _Select = require('../../components/Select');

var _Select2 = _interopRequireDefault(_Select);

var _Icon = require('../../components/Icon');

var _Icon2 = _interopRequireDefault(_Icon);

var _Popover = require('../../components/Popover');

var _Popover2 = _interopRequireDefault(_Popover);

var _Tooltip = require('../../components/Tooltip');

var _Tooltip2 = _interopRequireDefault(_Tooltip);

var _localeConsumerDecorator = require('../../components/LocaleProvider/localeConsumerDecorator');

var _localeConsumerDecorator2 = _interopRequireDefault(_localeConsumerDecorator);

var _ContainerContext = require('../../components/Popover/ContainerContext');

var _style = require('./style');

var _zh_CN = require('./locale/zh_CN');

var _zh_CN2 = _interopRequireDefault(_zh_CN);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var noop = function noop() {};
var deprecatedLogForOnRowSelect = exports.deprecatedLogForOnRowSelect = (0, _once3.default)(function () {
    return (0, _deprecatedLog2.default)('Table onRowSelect', 'rowSelection.onChange');
});

var placeholderKey = exports.placeholderKey = 'table_column_width_placeholder';

var TableContext = exports.TableContext = (0, _createReactContext2.default)();

var TableRow = function (_PureComponent) {
    _inherits(TableRow, _PureComponent);

    function TableRow() {
        var _ref2;

        var _temp, _this, _ret;

        _classCallCheck(this, TableRow);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call.apply(_ref2, [this].concat(args))), _this), _this.state = {
            contextMenuVisible: false
        }, _this.hideContextMenu = function () {
            _this.setState({
                contextMenuVisible: false
            });
        }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(TableRow, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                record = _props.record,
                contextMenu = _props.contextMenu,
                rest = _objectWithoutProperties(_props, ['record', 'contextMenu']);

            var contextMenuVisible = this.state.contextMenuVisible;

            if (contextMenu) {
                return _react2.default.createElement(
                    _Popover2.default,
                    {
                        popup: _react2.default.createElement(
                            'div',
                            null,
                            contextMenu(record, this.hideContextMenu)
                        ),
                        trigger: ['contextMenu'],
                        hideAction: ['click'],
                        visible: contextMenuVisible,
                        onVisibleChange: function onVisibleChange(visible) {
                            return _this2.setState({ contextMenuVisible: visible });
                        },
                        animation: null,
                        alignPoint: true
                    },
                    _react2.default.createElement('tr', rest)
                );
            }
            return _react2.default.createElement('tr', rest);
        }
    }]);

    return TableRow;
}(_react.PureComponent);

TableRow.propTypes = {
    record: _propTypes2.default.object,
    contextMenu: _propTypes2.default.func
};

var missingColumnKeyWarn = function missingColumnKeyWarn() {
    return console.error('Warning: Table column need a unique key');
};

var Table = (_dec = (0, _localeConsumerDecorator2.default)({ defaultLocale: _zh_CN2.default, localeName: 'Table' }), _dec(_class2 = (_temp2 = _class3 = function (_Component) {
    _inherits(Table, _Component);

    function Table(props) {
        _classCallCheck(this, Table);

        var _this3 = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

        _initialiseProps.call(_this3);

        _this3.state = {
            filters: _this3.calDefaultFilters(props),
            filtersFromProps: _this3.calFiltersFromProps(props),
            order: null,
            selectedRowKeyMap: {},
            columnConfig: props.defaultColumnConfig,
            searchValue: ''
        };
        // init pagination
        var pagination = props.pagination;

        if ((0, _isObject3.default)(pagination)) {
            _this3.state.pagination = {
                current: 'defaultCurrent' in pagination ? pagination.defaultCurrent : 1,
                pageSize: 'defaultPageSize' in pagination ? pagination.defaultPageSize : 10
            };
        } else {
            _this3.state.pagination = {
                current: 1,
                pageSize: 10
            };
        }
        // init selectedRowKeyMap from rowSelection
        var rowSelection = props.rowSelection;
        var selectedRowKeyMap = _this3.state.selectedRowKeyMap;

        if ((0, _isObject3.default)(rowSelection)) {
            if ('selectedRowKeys' in rowSelection) {
                (0, _each3.default)(rowSelection.selectedRowKeys, function (key) {
                    return selectedRowKeyMap[key] = true;
                });
            } else if ('defaultSelectedRowKeys' in rowSelection) {
                (0, _each3.default)(rowSelection.defaultSelectedRowKeys, function (key) {
                    return selectedRowKeyMap[key] = true;
                });
            }
        }
        // init order
        if ('order' in props) {
            var order = _this3.getOrder(props.order, props.columns);
            _this3.state.order = order;
        } else if ('defaultOrder' in props) {
            var _order = _this3.getOrder(props.defaultOrder, props.columns);
            _this3.state.order = _order;
        }
        _this3.check(props);
        return _this3;
    }
    /**
     * @deprecated
     */


    _createClass(Table, [{
        key: 'render',
        value: function render() {
            var _this4 = this;

            /* eslint-disable no-unused-vars */
            var _props2 = this.props,
                _p = _props2.pagination,
                _d = _props2.dataSource,
                _c = _props2.columns,
                rowSelection = _props2.rowSelection,
                onRowSelect = _props2.onRowSelect,
                contextMenu = _props2.contextMenu,
                emptyContent = _props2.emptyContent,
                errorContent = _props2.errorContent,
                className = _props2.className,
                style = _props2.style,
                expandedRowRender = _props2.expandedRowRender,
                expandIconAsCell = _props2.expandIconAsCell,
                expandIconColumnIndex = _props2.expandIconColumnIndex,
                defaultExpandAllRows = _props2.defaultExpandAllRows,
                _props2$title = _props2.title,
                title = _props2$title === undefined ? noop : _props2$title,
                _props2$footer = _props2.footer,
                footer = _props2$footer === undefined ? noop : _props2$footer,
                locale = _props2.locale,
                hideExpandIcon = _props2.hideExpandIcon,
                _props2$onRow = _props2.onRow,
                onRow = _props2$onRow === undefined ? noop : _props2$onRow,
                components = _props2.components,
                onExpand = _props2.onExpand,
                zebraCrossing = _props2.zebraCrossing,
                columnPlaceholder = _props2.columnPlaceholder,
                tableLayout = _props2.tableLayout,
                scroll = _props2.scroll,
                customStyle = _props2.customStyle,
                rest = _objectWithoutProperties(_props2, ['pagination', 'dataSource', 'columns', 'rowSelection', 'onRowSelect', 'contextMenu', 'emptyContent', 'errorContent', 'className', 'style', 'expandedRowRender', 'expandIconAsCell', 'expandIconColumnIndex', 'defaultExpandAllRows', 'title', 'footer', 'locale', 'hideExpandIcon', 'onRow', 'components', 'onExpand', 'zebraCrossing', 'columnPlaceholder', 'tableLayout', 'scroll', 'customStyle']);

            if (emptyContent === undefined) {
                emptyContent = _react2.default.createElement(
                    _Notice2.default,
                    { closable: false },
                    locale.emptyTip
                );
            }
            /* eslint-enable no-unused-vars */
            var pagination = this.getPagination();
            var _state = this.state,
                filters = _state.filters,
                filtersFromProps = _state.filtersFromProps,
                searchValue = _state.searchValue,
                columnConfig = _state.columnConfig;

            var finalFilters = this.mergeFilters(filters, filtersFromProps, _c);

            var _getDataSource = this.getDataSource(finalFilters),
                dataSource = _getDataSource.dataSource,
                total = _getDataSource.total;

            if (pagination && 'total' in pagination) {
                total = pagination.total;
            }
            var columns = this.getColumns(dataSource, finalFilters);

            var defaultExpandAllRowsProps = !defaultExpandAllRows ? null : function () {
                var _state$changedUnExpan = _this4.state.changedUnExpandedRowKeys,
                    changedUnExpandedRowKeys = _state$changedUnExpan === undefined ? {} : _state$changedUnExpan;

                var expandedRowKeys = _this4.getExpandedRowKeys(dataSource, changedUnExpandedRowKeys);

                return {
                    expandedRowKeys: expandedRowKeys,
                    onExpand: _this4.onExpandHandler
                };
            }();

            return _react2.default.createElement(
                _ContainerContext.InhertProvider,
                { value: { getPopupContainer: this.getPopupContainer } },
                _react2.default.createElement(
                    TableContext.Provider,
                    {
                        value: {
                            columns: _c,
                            columnConfig: columnConfig,
                            onColumnConfigChange: this.onColumnConfigChange,
                            handleSearch: this.handleSearch,
                            locale: locale
                        }
                    },
                    _react2.default.createElement(
                        _style.TableWrap,
                        {
                            className: className,
                            style: style,
                            hideExpandIcon: hideExpandIcon,
                            zebraCrossing: zebraCrossing,
                            customStyle: customStyle
                        },
                        _react2.default.createElement(_style.PopupContainer, { innerRef: this.savePopupContainer }),
                        _react2.default.createElement(_rcTable2.default, _extends({}, defaultExpandAllRowsProps, rest, {
                            scroll: scroll,
                            tableLayout: tableLayout ? tableLayout : scroll && scroll.x ? 'fixed' : undefined,
                            prefixCls: _style.prefixCls,
                            data: dataSource,
                            columns: columns,
                            onRow: this.onRow,
                            components: (0, _extend3.default)({}, components, {
                                body: {
                                    row: TableRow
                                }
                            }),
                            emptyText: null,
                            expandIconAsCell: !!expandedRowRender || expandIconAsCell,
                            expandedRowRender: expandedRowRender,
                            expandIconColumnIndex: expandIconColumnIndex === undefined ? columns[0] && columns[0].key === 'table_row_selection' ? 1 : 0 : expandIconColumnIndex,
                            title: function title() {
                                return _this4.renderTitle({ filters: finalFilters, searchValue: searchValue, total: total, locale: locale });
                            },
                            footer: function footer() {
                                return _this4.renderFooter({ dataSource: _d, emptyContent: emptyContent, errorContent: errorContent });
                            }
                        })),
                        footer(),
                        pagination === null ? null : _react2.default.createElement(_Pagination2.default, _extends({
                            size: 'sm',
                            total: total
                        }, {
                            hideOnSinglePage: false,
                            showQuickJumper: true,
                            showSizeChanger: true
                        }, pagination, {
                            className: _style.prefixCls + '-pagination',
                            onChange: function onChange(current, pageSize) {
                                _this4.setState({
                                    pagination: { current: current, pageSize: pageSize }
                                });
                                pagination.onChange && pagination.onChange(current, pageSize);
                            },
                            onPageSizeChange: function onPageSizeChange(current, pageSize) {
                                _this4.setState({
                                    pagination: { current: current, pageSize: pageSize }
                                });
                                pagination.onPageSizeChange && pagination.onPageSizeChange(current, pageSize);
                            },
                            onAdvise: function onAdvise(current, pageSize) {
                                _this4.setState({
                                    pagination: { current: current, pageSize: pageSize }
                                });
                                pagination.onAdvise && pagination.onAdvise(current, pageSize);
                            }
                        }))
                    )
                )
            );
        }
    }]);

    return Table;
}(_react.Component), _class3.propTypes = {
    /** 分页组件的配置，传入null为隐藏分页 */
    pagination: _propTypes2.default.object,
    /** 数据源 */
    dataSource: _propTypes2.default.array,
    /** 表列信息，具体属性参考 columns 事例 */
    columns: _propTypes2.default.array.isRequired,
    /**
     * 启用后会创建一个无宽度的空列，用作宽度占位，占位后宽度溢出便不会导致表格列被压缩，多出的宽度会被空列占用。
     * 占位列 column.key 为 table\_column\_width\_placeholder，使用中需注意避免重复 key
     */
    columnPlaceholder: _propTypes2.default.bool,
    /** 表列配置项，非受控 */
    defaultColumnConfig: _propTypes2.default.object,
    /** 表列配置修改回调 */
    onColumnConfigChange: _propTypes2.default.func,
    /** 额外表信息渲染 */
    expandedRowRender: _propTypes2.default.func,
    /** 额外表展开按钮是否独立占据一格，data有children时有效 */
    expandIconAsCell: _propTypes2.default.bool,
    /** 展开按钮的塞入的column index，expandIconAsCell为false时生效 */
    expandIconColumnIndex: _propTypes2.default.number,
    /** 隐藏扩展列按钮 */
    hideExpandIcon: _propTypes2.default.bool,
    /** 默认展开项，非受控 */
    defaultExpandedRowKeys: _propTypes2.default.array,
    /** 展开项，受控 */
    expandedRowKeys: _propTypes2.default.array,
    /** 是否默认展开所有列 */
    defaultExpandAllRows: _propTypes2.default.bool,
    /** 展开事件 */
    onExpandedRowsChange: _propTypes2.default.func,
    /** 展开按钮点击事件 */
    onExpand: _propTypes2.default.func,
    /**
     * 设置行props
     * @argument record - 行数据
     * @argument index - 行当前翻页中的index 不可作为key使用 不建议使用
     */
    onRow: _propTypes2.default.func,
    /** 设置表头props
     * @argument record - 行数据
     * @argument index - 表头行的index 表示存在分组时(column.children)的表头层级
     */
    onHeaderRow: _propTypes2.default.func,
    /**
     * 列表可选选项配置.
     * column.key 为 table\_row\_selection，使用中需注意避免重复 key
     */
    rowSelection: _propTypes2.default.oneOfType([_propTypes2.default.shape({
        /** 选框是否为 fixed */
        fixed: _propTypes2.default.bool,
        /** 选中项变化回调 */
        onChange: _propTypes2.default.func,
        /** 默认当前选中项，uncontrolled */
        defaultSelectedRowKeys: _propTypes2.default.array,
        /** 当前选中项，controlled */
        selectedRowKeys: _propTypes2.default.array,
        /** 获取当前行选中禁用状态 */
        getDisabledOfRow: _propTypes2.default.func,
        /**
         * 是否多选
         * @default true
         */
        multiple: _propTypes2.default.bool,
        /**
         * 多选选中时的提示，bottom 为显示在下方
         * @default true
         */
        selectedTip: _propTypes2.default.oneOf([true, false, 'bottom']),
        /** 是否禁用 */
        disabled: _propTypes2.default.bool
    }), _propTypes2.default.oneOf([true])]),
    /**
     * 列表选项变化回调
     * @deprecated - 请使用rowSelection.onChange来替换
     */
    onRowSelect: _propTypes2.default.func,
    /** 是否显示表头 */
    showHeader: _propTypes2.default.bool,
    /** 头部内容 */
    title: _propTypes2.default.func,
    /** 底部内容 */
    footer: _propTypes2.default.func,
    /** 无数据时的展示内容 */
    emptyContent: _propTypes2.default.node,
    /** 报错信息 */
    errorContent: _propTypes2.default.node,
    /** 如何搜索 */
    handleSearch: _propTypes2.default.func,
    /** 自定义样式 */
    customStyle: _propTypes2.default.shape({
        outerPadding: _propTypes2.default.string
    }),
    /** 滚动配置 */
    scroll: _propTypes2.default.shape({
        /** x轴滚动配置，为true自动展开并滚动，为数字时设定表单的宽度 */
        x: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
        /** y轴滚动配置，为数字时设定表单的高度 */
        y: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),
        /** table body 滚动时的回调 */
        onScroll: _propTypes2.default.func
    }),
    /** 表格布局，当 scroll.x 有值时为 fixed，其它时候默认为 auto，可自行覆盖 */
    tableLayout: _propTypes2.default.oneOf(['auto', 'fixed']),
    /** 定义如何获取每行的键值 */
    rowKey: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
    /** 是否有斑马线，存在子表格时，斑马线样式可能会错乱 */
    zebraCrossing: _propTypes2.default.bool,
    /** 自定义表格组件，慎用 */
    components: _propTypes2.default.shape({
        header: _propTypes2.default.shape({
            cell: _propTypes2.default.any
        })
    }),
    /** 默认排序设置，key 为 column key，state 为升序(asc)或降序(desc) */
    defaultOrder: _propTypes2.default.shape({
        key: _propTypes2.default.string,
        state: _propTypes2.default.oneOf(['desc', 'asc'])
    }),
    /** 受控排序设置，key 为 column key，state 为升序(asc)或降序(desc) */
    order: _propTypes2.default.shape({
        key: _propTypes2.default.string,
        state: _propTypes2.default.oneOf(['desc', 'asc'])
    }),
    /**
     * 表格的筛选等条件变更时的回调
     * @param condition - 变更的数据
     * @param condition.order - 排序
     * @param condition.filter - 筛选
     * @param condition.searchValue - 搜索
     */
    onConditionChange: _propTypes2.default.func,
    /**
     * order、filter、searchValue、pagination变化时表格内部不处理
     */
    doNotHandleCondition: _propTypes2.default.bool,
    /**
     * 右键菜单
     * @param record - 该行的记录值
     */
    contextMenu: _propTypes2.default.func,
    /** @ignore */
    className: _propTypes2.default.string,
    /** @ignore */
    style: _propTypes2.default.object,
    /** @ignore */
    locale: _propTypes2.default.object
}, _class3.defaultProps = {
    pagination: {},
    dataSource: [],
    columns: [],
    defaultColumnConfig: {},
    onColumnConfigChange: function onColumnConfigChange() {},
    handleSearch: function handleSearch(record, searchValue) {
        return (0, _map3.default)(record).join('').indexOf(searchValue) >= 0;
    },
    customStyle: {},
    rowKey: 'key'
}, _initialiseProps = function _initialiseProps() {
    var _this5 = this;

    this.check = function (props) {
        var columns = props.columns;

        (0, _each3.default)(columns, function (column) {
            if (column.key === undefined) missingColumnKeyWarn();
        });
    };

    this.componentWillReceiveProps = function (nextProps) {
        var rowSelection = nextProps.rowSelection;

        if ((0, _isObject3.default)(rowSelection) && 'selectedRowKeys' in rowSelection) {
            var selectedRowKeyMap = {};
            (0, _each3.default)(rowSelection.selectedRowKeys, function (key) {
                return selectedRowKeyMap[key] = true;
            });
            _this5.setState({
                selectedRowKeyMap: selectedRowKeyMap
            });
        }
        // pick controlled filter value
        _this5.setState({
            filtersFromProps: _this5.calFiltersFromProps(nextProps)
        });
        if ('order' in nextProps) {
            var order = _this5.getOrder(nextProps.order, nextProps.columns);
            _this5.setState({
                order: order
            });
        }
    };

    this.getOrder = function (order, columns) {
        if (!order || !columns) return null;
        var key = order.key,
            state = order.state;

        if (!key || !state) return null;
        var column = (0, _find3.default)(columns, function (column) {
            return column.key === key;
        });
        if (!column) return null;
        var columnOrder = column.order,
            dataIndex = column.dataIndex;

        if (!columnOrder) return null;
        var handleOrder = columnOrder.handleOrder;

        return {
            key: key,
            state: state,
            dataIndex: dataIndex,
            handleOrder: handleOrder
        };
    };

    this.calFiltersFromProps = function (_ref3) {
        var _ref3$columns = _ref3.columns,
            columns = _ref3$columns === undefined ? [] : _ref3$columns;

        var filters = {};
        // pick filter controlled value
        columns.forEach(function (column, i) {
            var filter = column.filter;

            var columnKey = _this5.getColumnKey(column, i);
            if (!filter) return;
            var filterValue = void 0;
            if ('value' in filter) {
                filterValue = filter.value;
                filters[columnKey] = {
                    value: filterValue
                };
            }
        });
        return filters;
    };

    this.calDefaultFilters = function (_ref4) {
        var _ref4$columns = _ref4.columns,
            columns = _ref4$columns === undefined ? [] : _ref4$columns;

        var filters = {};
        // pick filter controlled value
        columns.forEach(function (column, i) {
            var filter = column.filter;

            if (!filter) return;
            var columnKey = _this5.getColumnKey(column, i);
            var filterValue = void 0;
            // pick default value
            if ('defaultValue' in filter) {
                filterValue = filter.defaultValue;
                filters[columnKey] = {
                    value: filterValue
                };
            }
        });
        return filters;
    };

    this.mergeFilters = function (stateFilters, propsFilters, columns) {
        var filters = Object.assign({}, stateFilters, propsFilters);
        (0, _each3.default)(filters, function (filter, key) {
            var column = (0, _find3.default)(columns, function (column, i) {
                return _this5.getColumnKey(column, i) === key;
            });
            if (!column || filter.value == null || column.multiple && (0, _isEmpty3.default)(filter.value)) {
                delete filters[key];
            } else {
                filter.column = column;
            }
        });
        return filters;
    };

    this.getExpandedRowKeys = function (dataSource, changedUnExpandedRowKeys) {
        var flatDataSource = _this5.flatDataSource(dataSource);
        var expandedRowKeys = [];
        (0, _each3.default)(flatDataSource, function (item) {
            var key = item.key;

            if (!changedUnExpandedRowKeys[key]) {
                expandedRowKeys.push(key);
            }
        });
        return expandedRowKeys;
    };

    this.deprecatedOnRowSelect = function (selectedRowKeys) {
        if ('onRowSelect' in _this5.props) {
            deprecatedLogForOnRowSelect();
            _this5.props.onRowSelect(selectedRowKeys);
        }
    };

    this.onSelectedRowKeysChange = function (selectedRowKeyMap) {
        var rowSelection = _this5.props.rowSelection;

        if (!rowSelection) return;
        var selectedRowKeys = [];
        (0, _each3.default)(selectedRowKeyMap, function (selected, key) {
            selected && selectedRowKeys.push(key);
        });
        if ((0, _isObject3.default)(rowSelection)) {
            if (rowSelection.onChange) {
                rowSelection.onChange(selectedRowKeys);
            }
            if (!('selectedRowKeys' in rowSelection)) {
                _this5.setState({
                    selectedRowKeyMap: selectedRowKeyMap
                });
            }
        } else {
            _this5.setState({
                selectedRowKeyMap: selectedRowKeyMap
            });
        }
        _this5.deprecatedOnRowSelect(selectedRowKeys);
    };

    this.onColumnConfigChange = function (config) {
        var onColumnConfigChange = _this5.props.onColumnConfigChange;

        _this5.setState({
            columnConfig: config
        });
        onColumnConfigChange(config);
    };

    this.handleSearch = function (v) {
        if (v !== _this5.state.searchValue) {
            _this5.setState({
                pagination: Object.assign({}, _this5.state.pagination, { current: 1 })
            });
            _this5.handleConditionChange({ searchValue: v });
        }
    };

    this.handleConditionChange = function (stateCondition) {
        var callbackCondition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        stateCondition = Object.assign({}, (0, _pick3.default)(_this5.state, ['order', 'filters', 'searchValue']), stateCondition);
        _this5.setState(Object.assign({}, stateCondition));
        var onConditionChange = _this5.props.onConditionChange;
        var order = callbackCondition.order,
            filters = callbackCondition.filters,
            searchValue = callbackCondition.searchValue;

        if (!('order' in callbackCondition)) {
            order = stateCondition.order;
        }
        if (!('filters' in callbackCondition)) {
            filters = stateCondition.filters;
        }
        if (!('searchValue' in callbackCondition)) {
            searchValue = stateCondition.searchValue;
        }

        onConditionChange && onConditionChange({
            order: order ? (0, _pick3.default)(order, ['key', 'state']) : null,
            filters: (0, _map3.default)(filters, function (filter, key) {
                return { key: key, value: filter.value };
            }),
            searchValue: searchValue
        });
    };

    this.renderFilter = function (column) {
        var filterInfo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var index = arguments[2];
        var filter = column.filter;

        if (!filter) {
            return null;
        }
        var columnKey = _this5.getColumnKey(column, index);

        var options = filter.options,
            multiple = filter.multiple,
            _filter$onChange = filter.onChange,
            _onChange = _filter$onChange === undefined ? function () {} : _filter$onChange,
            rest = _objectWithoutProperties(filter, ['options', 'multiple', 'onChange']);

        var newOptions = (0, _map3.default)(options, function (option) {
            return (0, _isObject3.default)(option) ? option : { value: option };
        });

        var value = filterInfo.value;

        var finalValue = value == null ? undefined : multiple && (0, _isEmpty3.default)(value) ? undefined : value;

        return _react2.default.createElement(_Select2.default, _extends({
            options: newOptions,
            value: finalValue,
            onChange: function onChange(value) {
                _this5.handleFilter(columnKey, value == null || multiple && !value.length ? null : value);
                _onChange(value);
            },
            className: _style.prefixCls + '-filter',
            renderSelector: function renderSelector(content, visible) {
                return _react2.default.createElement(_Icon2.default, { key: 'icon', type: 'filter', size: 'xs', color: visible ? 'blue' : null });
            },
            multiple: multiple
        }, rest));
    };

    this.handleFilter = function (key, value) {
        var finalFilters = _this5.mergeFilters(_this5.state.filters, Object.assign({}, _this5.state.filtersFromProps, _defineProperty({}, key, {
            value: value
        })), _this5.props.columns);
        _this5.setState({
            pagination: Object.assign({}, _this5.state.pagination, { current: 1 })
        });
        _this5.handleConditionChange({ filters: finalFilters });
    };

    this.clearFilter = function () {
        _this5.handleConditionChange({ filters: {}, searchValue: '' }, { filters: {} });
    };

    this.renderOrder = function (order, key, dataIndex) {
        var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';

        if (!order) {
            return null;
        }
        var handleOrder = order.handleOrder;

        return _react2.default.createElement(_style.SortIcon, {
            type: {
                none: 'sort',
                desc: 'arrow-down',
                asc: 'arrow-up'
            }[state],
            onClick: function onClick() {
                _this5.handleOrder(key, {
                    dataIndex: dataIndex,
                    handleOrder: handleOrder,
                    state: state
                });
            }
        });
    };

    this.handleOrder = function (key, _ref5) {
        var dataIndex = _ref5.dataIndex,
            handleOrder = _ref5.handleOrder,
            state = _ref5.state;

        var order = state === 'asc' ? null : {
            key: key,
            dataIndex: dataIndex,
            handleOrder: handleOrder,
            state: {
                none: 'desc',
                desc: 'asc'
            }[state]
        };
        // controlled
        if ('order' in _this5.props) {
            _this5.handleConditionChange({}, { order: order });
        } else {
            _this5.handleConditionChange({
                order: order
            });
        }
    };

    this.flatDataSource = function () {
        var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var childrenName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'children';

        var result = [];
        var push = function push(record) {
            var index = result.length;
            result.push({
                record: record,
                index: index,
                key: _this5.getRowKey(record, index)
            });
        };
        var loop = function loop(array) {
            array.forEach(function (record) {
                if (record[childrenName]) {
                    var newRecord = Object.assign({}, record);
                    delete newRecord[childrenName];
                    push(newRecord);
                    if (record[childrenName].length > 0) {
                        loop(record[childrenName]);
                    }
                } else {
                    push(record);
                }
            });
        };
        loop(dataSource);
        return result;
    };

    this.getDataSource = function (filters) {
        var _props3 = _this5.props,
            dataSource = _props3.dataSource,
            handleSearch = _props3.handleSearch,
            doNotHandleCondition = _props3.doNotHandleCondition;
        var _state2 = _this5.state,
            order = _state2.order,
            searchValue = _state2.searchValue;

        var data = (0, _clone3.default)(dataSource);
        var doFilter = function doFilter(dataSource, filter) {
            var value = filter.value,
                columnInfo = filter.column;
            var dataIndex = columnInfo.dataIndex,
                _columnInfo$filter = columnInfo.filter,
                multiple = _columnInfo$filter.multiple,
                _columnInfo$filter$ha = _columnInfo$filter.handleFilter,
                handleFilter = _columnInfo$filter$ha === undefined ? function (value, record, filterValue, multiple) {
                if (value == null) {
                    return false;
                }
                if ((0, _isNumber3.default)(value)) {
                    value = '' + value;
                } else if (!(0, _isString3.default)(value)) {
                    return false;
                }
                if (!multiple) {
                    return value.indexOf(filterValue) >= 0;
                } else {
                    for (var i = 0; i < filterValue.length; i++) {
                        var v = filterValue[i];
                        if (value.indexOf(v) >= 0) {
                            return true;
                        }
                    }
                }
            } : _columnInfo$filter$ha;

            return (0, _filter3.default)(dataSource, function (record) {
                return handleFilter(record[dataIndex], record, value, multiple);
            });
        };
        if (!doNotHandleCondition && !(0, _isEmpty3.default)(filters)) {
            (0, _forEach3.default)(filters, function (filter, key) {
                return data = doFilter(data, filter, key);
            });
        }
        var doSearch = function doSearch(dataSource, searchValue) {
            return dataSource.filter(function (record) {
                return handleSearch(record, searchValue);
            });
        };
        if (!doNotHandleCondition && searchValue && searchValue.trim()) {
            data = doSearch(data, searchValue.trim());
        }
        var doOrder = function doOrder(dataSource, order) {
            var dataIndex = order.dataIndex,
                handleOrder = order.handleOrder,
                state = order.state;

            return dataSource.sort(handleOrder ? function () {
                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    args[_key2] = arguments[_key2];
                }

                return handleOrder.apply(undefined, [state].concat(args));
            } : {
                desc: function desc(a, b) {
                    return a[dataIndex] > b[dataIndex] ? -1 : a[dataIndex] < b[dataIndex] ? 1 : 0;
                },
                asc: function asc(a, b) {
                    return a[dataIndex] < b[dataIndex] ? -1 : a[dataIndex] > b[dataIndex] ? 1 : 0;
                }
            }[state]);
        };
        if (!doNotHandleCondition && order) {
            data = doOrder(data, order);
        }

        var total = data.length;
        var pagination = _this5.getPagination();
        if (!doNotHandleCondition && pagination !== null) {
            var current = pagination.current,
                pageSize = pagination.pageSize;

            var from = (current - 1) * pageSize;
            var to = from + pageSize;
            data = data.slice(from, to);
        }
        return {
            dataSource: data,
            total: total
        };
    };

    this.handleToggleCurrentPage = function (enableKeysOfCurrentPage, checked) {
        var selectedRowKeyMap = _this5.state.selectedRowKeyMap;

        var extendSelectedRowKeyMap = {};
        (0, _each3.default)(enableKeysOfCurrentPage, function (key) {
            extendSelectedRowKeyMap[key] = checked;
        });
        _this5.onSelectedRowKeysChange(Object.assign({}, selectedRowKeyMap, extendSelectedRowKeyMap));
    };

    this.handleSelectRecord = function (key, checked) {
        var rowSelection = _this5.props.rowSelection;
        var selectedRowKeyMap = _this5.state.selectedRowKeyMap;

        if (rowSelection.multiple === false) {
            _this5.onSelectedRowKeysChange(_defineProperty({}, key, true));
        } else {
            _this5.onSelectedRowKeysChange(Object.assign({}, selectedRowKeyMap, _defineProperty({}, key, checked)));
        }
    };

    this.getRowKey = function (record, index) {
        var rowKey = _this5.props.rowKey;
        var key = typeof rowKey === 'function' ? rowKey(record, index) : record[rowKey];
        return key === undefined ? index : key;
    };

    this.getColumnKey = function () {
        var column = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var index = arguments[1];
        var key = column.key;

        return (key === undefined ? index : key) + '';
    };

    this.cancleSelect = function () {
        _this5.onSelectedRowKeysChange({});
    };

    this.getColumns = function (dataSourceOfCurrentPage, filters) {
        var _props4 = _this5.props,
            columns = _props4.columns,
            rowSelection = _props4.rowSelection,
            columnPlaceholder = _props4.columnPlaceholder,
            locale = _props4.locale;
        var _state3 = _this5.state,
            _state3$order = _state3.order,
            currentOrder = _state3$order === undefined ? {} : _state3$order,
            selectedRowKeyMap = _state3.selectedRowKeyMap,
            columnConfig = _state3.columnConfig;

        var cloneColumns = columns.map(function (column, index) {
            return Object.assign({}, column, {
                index: index
            });
        });
        var newColumns = cloneColumns.filter(function (column) {
            var key = column.key;

            return !columnConfig[key] || !columnConfig[key].hidden;
        });

        var generateColumnTitle = function generateColumnTitle(column) {
            var dataIndex = column.dataIndex,
                title = column.title,
                renderTitle = column.renderTitle,
                order = column.order,
                children = column.children,
                index = column.index;

            var columnKey = _this5.getColumnKey(column, index);
            if (children) {
                return Object.assign({}, column, {
                    children: children.map(generateColumnTitle)
                });
            } else {
                return Object.assign({}, column, {
                    title: _react2.default.createElement(
                        'div',
                        null,
                        renderTitle ? renderTitle(title) : title,
                        _this5.renderFilter(column, filters[columnKey], index),
                        _this5.renderOrder(order, columnKey, dataIndex, currentOrder && currentOrder.key === columnKey ? currentOrder.state : 'none')
                    )
                });
            }
        };
        newColumns = newColumns.map(generateColumnTitle);

        if (rowSelection) {
            var flatDataSourceOfCurrentPage = _this5.flatDataSource(dataSourceOfCurrentPage);
            var enableDataSourceOfCurrentPage = flatDataSourceOfCurrentPage;

            var selectionDisabled = rowSelection.disabled;


            if (rowSelection.getDisabledOfRow) {
                enableDataSourceOfCurrentPage = (0, _filter3.default)(flatDataSourceOfCurrentPage, function (item) {
                    return !rowSelection.getDisabledOfRow(item.record);
                });
            }
            var selectedEnableDataSourceOfCurrentPage = (0, _filter3.default)(enableDataSourceOfCurrentPage, function (item) {
                return selectedRowKeyMap[item.key];
            });

            var selectedEnableDataSourceOfCurrentPageCount = selectedEnableDataSourceOfCurrentPage.length;
            var isAllSelected = selectedEnableDataSourceOfCurrentPageCount === enableDataSourceOfCurrentPage.length && selectedEnableDataSourceOfCurrentPageCount > 0;

            var selectedCount = (0, _filter3.default)(selectedRowKeyMap, function (v) {
                return v;
            }).length;
            var renderSelectedAllCheckbox = function renderSelectedAllCheckbox() {
                return _react2.default.createElement(_Checkbox2.default, {
                    disabled: selectionDisabled,
                    onChange: function onChange() {
                        var enableKeysOfCurrentPage = enableDataSourceOfCurrentPage.map(function (item) {
                            return item.key;
                        });
                        _this5.handleToggleCurrentPage(enableKeysOfCurrentPage, !isAllSelected);
                    },
                    checked: isAllSelected,
                    indeterminate: !isAllSelected && selectedEnableDataSourceOfCurrentPageCount > 0
                });
            };
            newColumns.unshift({
                title: rowSelection.multiple === false ? null : rowSelection.selectedTip === false ? renderSelectedAllCheckbox() : _react2.default.createElement(
                    _Tooltip2.default,
                    {
                        visible: selectedCount > 0,
                        getPopupContainer: _this5.getPopupContainer,
                        popup: _react2.default.createElement(
                            'span',
                            null,
                            locale.selected,
                            ' ',
                            selectedCount,
                            ' ',
                            _react2.default.createElement(
                                _style.CancleSelect,
                                { onClick: _this5.cancleSelect },
                                locale.cancleSelect
                            )
                        ),
                        placement: rowSelection.selectedTip === 'bottom' ? 'bottomLeft' : 'topLeft',
                        align: {
                            offset: [-8, 0]
                        }
                    },
                    renderSelectedAllCheckbox()
                ),
                key: 'table_row_selection',
                width: 32,
                fixed: rowSelection.fixed,
                onHeaderCell: function onHeaderCell() {
                    return { className: _style.selectIconHeaderCls };
                },
                onCell: function onCell() {
                    return { className: _style.selectIconCellCls };
                },
                render: function render(value, record, index) {
                    var rowKey = _this5.getRowKey(record, index);
                    var disabled = false;
                    if (selectionDisabled) {
                        disabled = true;
                    } else if (rowSelection.getDisabledOfRow) {
                        disabled = rowSelection.getDisabledOfRow(record);
                    }
                    return rowSelection.multiple === false ? _react2.default.createElement(_Radio2.default, {
                        disabled: disabled,
                        onChange: function onChange() {
                            return _this5.handleSelectRecord(rowKey);
                        },
                        checked: selectedRowKeyMap[rowKey]
                    }) : _react2.default.createElement(_Checkbox2.default, {
                        disabled: disabled,
                        onChange: function onChange() {
                            return _this5.handleSelectRecord(rowKey, !selectedRowKeyMap[rowKey]);
                        },
                        checked: selectedRowKeyMap[rowKey]
                    });
                }
            });
        }

        if (columnPlaceholder) {
            var lastUnFixedIndex = (0, _findLastIndex3.default)(newColumns, function (columnConfig) {
                return !columnConfig.fixed;
            });
            newColumns.splice(lastUnFixedIndex + 1, 0, {
                title: '',
                key: placeholderKey,
                onHeaderCell: function onHeaderCell() {
                    return { className: _style.placeholderHeaderCls };
                },
                onCell: function onCell() {
                    return { className: _style.placeholderCellCls };
                },
                render: function render() {
                    return null;
                }
            });
        }
        return newColumns;
    };

    this.getPagination = function () {
        var paginationS = _this5.state.pagination,
            paginationP = _this5.props.pagination;

        return paginationP === null ? null : Object.assign({}, paginationS, paginationP);
    };

    this.renderSearchInfo = function (option) {
        var filters = option.filters,
            searchValue = option.searchValue,
            total = option.total,
            locale = option.locale;


        var first = true;
        var renderLabel = function renderLabel(_ref6) {
            var value = _ref6.value,
                _ref6$column$filter = _ref6.column.filter,
                multiple = _ref6$column$filter.multiple,
                options = _ref6$column$filter.options;

            options = options.map(function (option) {
                return !(0, _isObject3.default)(option) ? { value: option, label: option } : option;
            });
            if (multiple) {
                var label = (0, _map3.default)(value, function (v) {
                    var option = (0, _find3.default)(options, function (option) {
                        return v === option.value;
                    });
                    return option && option.label;
                });
                var _first = true;
                return (0, _map3.default)(label, function (_label) {
                    return _first ? [_first = false, _label] : [' | ', _label];
                });
            } else {
                var _option = (0, _find3.default)(options, function (option) {
                    return value === option.value;
                });
                return _option && _option.label;
            }
        };
        return !(0, _isEmpty3.default)(filters) || searchValue ? _react2.default.createElement(
            'div',
            { key: 'search-info', className: _style.prefixCls + '-search-tip-wrap' },
            _react2.default.createElement(
                _Notice2.default,
                { icon: null, closable: false, className: _style.prefixCls + '-filter-notice' },
                searchValue && _react2.default.createElement(
                    'span',
                    null,
                    locale.search,
                    locale.colon,
                    searchValue,
                    locale.semicolon
                ),
                !(0, _isEmpty3.default)(filters) && _react2.default.createElement(
                    'span',
                    null,
                    locale.filter,
                    locale.colon,
                    (0, _map3.default)(filters, function (filterInfo) {
                        return first ? [first = false, renderLabel(filterInfo)] : [', ', renderLabel(filterInfo)];
                    }),
                    locale.semicolon
                ),
                _react2.default.createElement(
                    'span',
                    null,
                    locale.searchResult,
                    locale.colon,
                    total,
                    locale.items,
                    locale.semicolon
                ),
                _react2.default.createElement(
                    'span',
                    null,
                    _react2.default.createElement(
                        'a',
                        { className: _style.prefixCls + '-reset-link', onClick: _this5.clearFilter },
                        locale.reset
                    )
                )
            )
        ) : null;
    };

    this.renderEmptyAndErrorInfo = function (option) {
        var dataSource = option.dataSource,
            emptyContent = option.emptyContent,
            errorContent = option.errorContent;

        if (errorContent) {
            return _react2.default.createElement(
                'div',
                { key: 'tip-info', className: _style.prefixCls + '-tip-wrap' },
                _react2.default.createElement(
                    'div',
                    { className: _style.prefixCls + '-error-content-wrap' },
                    errorContent
                )
            );
        }
        if ((!dataSource || !dataSource.length) && emptyContent) {
            return _react2.default.createElement(
                'div',
                { key: 'tip-info', className: _style.prefixCls + '-tip-wrap' },
                _react2.default.createElement(
                    'div',
                    { className: _style.prefixCls + '-empty-content-wrap' },
                    emptyContent
                )
            );
        }
    };

    this.renderTitle = function (option) {
        var title = _this5.props.title;

        return [title && _react2.default.createElement(
            'div',
            { className: _style.prefixCls + '-custom-title', key: 'custom' },
            title()
        ), _this5.renderSearchInfo(option)];
    };

    this.renderFooter = function (option) {
        return _react2.default.createElement(
            'div',
            null,
            _this5.renderEmptyAndErrorInfo(option)
        );
    };

    this.onExpandHandler = function (expanded, record) {
        var _state$changedUnExpan2 = _this5.state.changedUnExpandedRowKeys,
            changedUnExpandedRowKeys = _state$changedUnExpan2 === undefined ? {} : _state$changedUnExpan2;
        var onExpand = _this5.props.onExpand;

        var rowKey = _this5.getRowKey(record);
        if (expanded) {
            delete changedUnExpandedRowKeys[rowKey];
        } else {
            changedUnExpandedRowKeys[rowKey] = true;
        }
        _this5.setState({
            changedUnExpandedRowKeys: changedUnExpandedRowKeys
        });
        if (onExpand) {
            onExpand(expanded, record);
        }
    };

    this.onRow = function (record, index) {
        var _props5 = _this5.props,
            _props5$onRow = _props5.onRow,
            onRow = _props5$onRow === undefined ? noop : _props5$onRow,
            contextMenu = _props5.contextMenu;

        return Object.assign({}, onRow(record, index), {
            record: record,
            contextMenu: contextMenu
        });
    };

    this.savePopupContainer = function (_ref) {
        _this5.popupContainer = _ref;
    };

    this.getPopupContainer = function () {
        return _this5.popupContainer;
    };
}, _temp2)) || _class2);
exports.default = Table;
exports.prefixCls = _style.prefixCls;