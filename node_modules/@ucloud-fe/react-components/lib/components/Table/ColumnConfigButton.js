'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = undefined;

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _indexOf2 = require('lodash/indexOf');

var _indexOf3 = _interopRequireDefault(_indexOf2);

var _each2 = require('lodash/each');

var _each3 = _interopRequireDefault(_each2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps, _class2, _temp3;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Modal = require('../Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _Grid = require('../Grid');

var _Grid2 = _interopRequireDefault(_Grid);

var _style = require('./style');

var _Table = require('./Table');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfigModal = (_temp = _class = function (_PureComponent) {
    _inherits(ConfigModal, _PureComponent);

    function ConfigModal(props) {
        _classCallCheck(this, ConfigModal);

        var _this = _possibleConstructorReturn(this, (ConfigModal.__proto__ || Object.getPrototypeOf(ConfigModal)).call(this, props));

        _initialiseProps.call(_this);

        var _this$props = _this.props,
            columnConfig = _this$props.columnConfig,
            columns = _this$props.columns;

        var value = _this.convertConfigToValue(columnConfig, columns);
        _this.state = {
            value: value,
            config: columnConfig
        };
        return _this;
    }

    _createClass(ConfigModal, [{
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                columns = _props.columns,
                locale = _props.locale,
                onColumnConfigChange = _props.onColumnConfigChange,
                closeModal = _props.closeModal,
                modalProps = _props.modalProps;
            var _state = this.state,
                value = _state.value,
                config = _state.config;

            return _react2.default.createElement(
                _Modal2.default,
                _extends({}, modalProps, {
                    title: locale.columnConfigHeader,
                    visible: true,
                    onClose: closeModal,
                    onOk: function onOk() {
                        onColumnConfigChange(config);
                        closeModal();
                    },
                    destroyOnClose: true
                }),
                _react2.default.createElement(
                    _style.ColumnConfigModalNotice,
                    { closable: false, icon: null },
                    locale.columnConfigSelected,
                    locale.colon,
                    value.length,
                    '/',
                    columns.length,
                    locale.period,
                    locale.columnConfigTip
                ),
                _react2.default.createElement(
                    _style.ColumnConfigModalCheckboxGroup,
                    {
                        value: value,
                        onChange: function onChange(value) {
                            _this2.setState({
                                value: value,
                                config: _this2.convertValueToConfig(value, columns)
                            });
                        }
                    },
                    _react2.default.createElement(
                        _Grid2.default.Row,
                        null,
                        columns.map(function (column) {
                            var key = column.key,
                                title = column.title;

                            var dom = [_react2.default.createElement(
                                _Grid2.default.Col,
                                { key: key, span: 3 },
                                _react2.default.createElement(
                                    _style.ColumnConfigModalCheckbox,
                                    {
                                        size: 'lg',
                                        value: key,
                                        disabled: config[key] && config[key].disabled
                                    },
                                    title
                                )
                            )];
                            return dom;
                        })
                    )
                )
            );
        }
    }]);

    return ConfigModal;
}(_react.PureComponent), _class.propTypes = {
    columnConfig: _propTypes2.default.object.isRequired,
    columns: _propTypes2.default.array.isRequired,
    locale: _propTypes2.default.object.isRequired,
    onColumnConfigChange: _propTypes2.default.func.isRequired,
    closeModal: _propTypes2.default.func.isRequired,
    modalProps: _propTypes2.default.object
}, _initialiseProps = function _initialiseProps() {
    var _this3 = this;

    this.convertValueToConfig = function (value, columns) {
        var config = _this3.state.config;

        var newConfig = {};
        (0, _each3.default)(columns, function (column) {
            var key = column.key;

            var info = config[key] || {};
            newConfig[key] = {
                hidden: !((0, _indexOf3.default)(value, key) >= 0),
                disabled: info.disabled
            };
        });
        return newConfig;
    };

    this.convertConfigToValue = function (config, columns) {
        return (0, _map3.default)(columns, function (column) {
            var key = column.key;

            var info = config[key] || {};
            return {
                key: key,
                hidden: info.hidden,
                disabled: info.disabled
            };
        }).filter(function (info) {
            return !info.hidden;
        }).map(function (info) {
            return info.key;
        });
    };
}, _temp);
var ColumnConfigButton = (_temp3 = _class2 = function (_PureComponent2) {
    _inherits(ColumnConfigButton, _PureComponent2);

    function ColumnConfigButton() {
        var _ref;

        var _temp2, _this4, _ret;

        _classCallCheck(this, ColumnConfigButton);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp2 = (_this4 = _possibleConstructorReturn(this, (_ref = ColumnConfigButton.__proto__ || Object.getPrototypeOf(ColumnConfigButton)).call.apply(_ref, [this].concat(args))), _this4), _this4.state = {
            modalVisible: false
        }, _this4.showModal = function () {
            _this4.setState({
                modalVisible: true
            });
        }, _this4.closeModal = function () {
            _this4.setState({
                modalVisible: false
            });
        }, _temp2), _possibleConstructorReturn(_this4, _ret);
    }

    _createClass(ColumnConfigButton, [{
        key: 'render',
        value: function render() {
            var _this5 = this;

            var modalVisible = this.state.modalVisible;

            var _props2 = this.props,
                modalProps = _props2.modalProps,
                rest = _objectWithoutProperties(_props2, ['modalProps']);

            return _react2.default.createElement(
                _style.ColumnConfigWrap,
                rest,
                _react2.default.createElement(_style.ColumnConfigButtonWrap, { icon: 'cog', onClick: this.showModal }),
                modalVisible && _react2.default.createElement(
                    _Table.TableContext.Consumer,
                    null,
                    function (_ref2) {
                        var columns = _ref2.columns,
                            columnConfig = _ref2.columnConfig,
                            onColumnConfigChange = _ref2.onColumnConfigChange,
                            locale = _ref2.locale;
                        return _react2.default.createElement(ConfigModal, _extends({
                            modalProps: modalProps
                        }, {
                            columns: columns,
                            columnConfig: columnConfig,
                            onColumnConfigChange: onColumnConfigChange,
                            locale: locale,
                            closeModal: _this5.closeModal
                        }));
                    }
                )
            );
        }
    }]);

    return ColumnConfigButton;
}(_react.PureComponent), _class2.propTypes = {
    /** 弹窗的props */
    modalProps: _propTypes2.default.object
}, _temp3);
exports.default = ColumnConfigButton;