'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _once2 = require('lodash/once');

var _once3 = _interopRequireDefault(_once2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _Combine = require('../../components/Combine');

var _Combine2 = _interopRequireDefault(_Combine);

var _deprecatedLog2 = require('../../utils/deprecatedLog');

var _deprecatedLog3 = _interopRequireDefault(_deprecatedLog2);

var _style = require('./style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _deprecatedLog = (0, _once3.default)(function () {
    return (0, _deprecatedLog3.default)('Compact', 'Combine(spacing="compact")');
});

var Compact = (_temp = _class = function (_Component) {
    _inherits(Compact, _Component);

    function Compact(props) {
        _classCallCheck(this, Compact);

        var _this = _possibleConstructorReturn(this, (Compact.__proto__ || Object.getPrototypeOf(Compact)).call(this, props));

        _deprecatedLog();
        return _this;
    }

    _createClass(Compact, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                className = _props.className,
                sharedProps = _props.sharedProps,
                rest = _objectWithoutProperties(_props, ['className', 'sharedProps']);

            var controllerClassName = sharedProps.className;

            return _react2.default.createElement(_Combine2.default, _extends({
                spacing: 'compact',
                sharedProps: Object.assign({}, sharedProps, { className: (0, _classnames2.default)(controllerClassName, _style.controllerPrefix) })
            }, rest, {
                className: (0, _classnames2.default)(_style.prefixCls, className)
            }));
        }
    }]);

    return Compact;
}(_react.Component), _class.propTypes = {
    /** @ignore */
    children: _propTypes2.default.node,
    /** @ignore */
    className: _propTypes2.default.string,
    /** 组件共享的props，如size、className、style等 */
    sharedProps: _propTypes2.default.object
}, _class.defaultProps = {
    sharedProps: {}
}, _temp);
exports.default = Compact;