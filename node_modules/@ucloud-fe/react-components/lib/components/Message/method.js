'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.config = exports.popup = exports.loading = exports.error = exports.warning = exports.message = exports.info = exports.success = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _styledComponents = require('styled-components');

var _runtime = require('../../components/ThemeProvider/runtime');

var _Message = require('./Message');

var _Message2 = _interopRequireDefault(_Message);

var _MessageContainer = require('./MessageContainer');

var _MessageContainer2 = _interopRequireDefault(_MessageContainer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = {
    duration: 4500,
    getContainer: function getContainer() {
        return document.body;
    },
    top: 20
};

var messageContainerDom = document.createElement('div');

var mainContainerDom = config.getContainer();
var containerRef = void 0;
_reactDom2.default.render(_react2.default.createElement(_MessageContainer2.default, { ref: function ref(_ref) {
        return containerRef = _ref;
    }, id: 'uc-fe-message-content-wrap', top: config.top }), messageContainerDom);

mainContainerDom.appendChild(messageContainerDom);

var popupMessage = function popupMessage(message) {
    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.duration;
    var onClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};

    var messageUid = containerRef.appendMessage(_react2.default.createElement(
        _styledComponents.ThemeProvider,
        { theme: (0, _runtime.getRuntimeTheme)() },
        message
    ));
    var destroy = function destroy() {
        containerRef.removeMessage(messageUid) && onClose();
    };
    if (duration) {
        setTimeout(function () {
            destroy();
        }, duration);
    }
    return {
        destory: function destory() {
            console.error('Wraning: wrong name of destory, please use destroy to instead');
            destroy();
        },
        destroy: destroy
    };
};

var showMessage = function showMessage(styleType, content) {
    var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : config.duration;
    var onClose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {};
    var option = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var zIndex = option.zIndex,
        style = option.style,
        className = option.className;

    var props = {
        children: content
    };
    var newStyle = Object.assign({}, style);
    if ('zIndex' in option) {
        newStyle.zIndex = zIndex;
    }
    if (!_react2.default.isValidElement(content) && Object.prototype.toString.call(content) === '[object Object]') {
        props = content;
    }
    var destroy = function destroy() {};
    var message = _react2.default.createElement(_Message2.default, _extends({ styleType: styleType, style: newStyle, className: className }, props, { onClose: function onClose() {
            return destroy();
        } }));
    var instance = popupMessage(message, duration, onClose, option);
    destroy = instance.destroy;
    return instance;
};

var message = function message() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    return showMessage.apply(undefined, ['default'].concat(args));
};
var info = function info() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
    }

    return showMessage.apply(undefined, ['default'].concat(args));
};
var success = function success() {
    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
    }

    return showMessage.apply(undefined, ['success'].concat(args));
};
var warning = function warning() {
    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
    }

    return showMessage.apply(undefined, ['warning'].concat(args));
};
var error = function error() {
    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
    }

    return showMessage.apply(undefined, ['error'].concat(args));
};
var loading = function loading() {
    for (var _len6 = arguments.length, args = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
    }

    return showMessage.apply(undefined, ['loading'].concat(args));
};

var popup = function popup() {
    return popupMessage.apply(undefined, arguments);
};

var changeConfig = function changeConfig() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    if ('duration' in options) {
        config.duration = options.duration;
    }
    if ('top' in options) {
        config.top = options.top;
        containerRef && containerRef.setTop(options.top);
    }
};

exports.success = success;
exports.info = info;
exports.message = message;
exports.warning = warning;
exports.error = error;
exports.loading = loading;
exports.popup = popup;
exports.config = changeConfig;